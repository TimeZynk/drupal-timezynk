// Protobuf specification for TimeZynk RPC.
// All timestamps and dates are transferred as seconds since the epoch.

option java_package = "com.timezynk.tzproto";

package TZBase;

// Basic types

enum TZFlags {
  CREATED = 0;
  SIGNED_IN = 1;
  REPORTED = 2;
  APPROVED = 3;
  LOCKED = 4;
  DELETED = 255;
}

enum TZJobFlags {
  ACTIVE = 0;
  INACTIVE = 255;
}

enum TZJobType {
  PRESENCE = 0;
  ABSENCE = 1;
}

enum TZConstants {
  VERSION = 2;
}

message TZTime {
 optional int32 hour = 1;
 optional int32 minute = 2;
}

message TZDate {
  optional int32 year = 1;
  // January == 1;
  optional int32 month = 2;
  optional int32 day = 3;
}

// An open date range.
// Since the range is open
//   the start field implies time from and including 00h00 at the given date.
//   the end field implies time up to but excluding 00h00 at the date _after_ the given date.
// thusly
//   start = 2010-09-15, end = 2010-09-15
// covers all of that beautiful September day.
//
// Skipping either field implies an open-ended range.
// Skipping both might mean infinity, but I promise,
// I will show up with a baseball bat.
// You might as well have not set a range...
message TZDateRange {
  optional TZDate start = 1;
  optional TZDate end = 2;
}
// Encodes a timespan of maximum 24 hours, fixed to a date.
//
// If for some reason you want a timespan that is
// not fixed to a specific date, just skip the date field.
// The server will most likely not know what to do with it,
// but there you go.
message TZTimeSpan {
  optional TZDate date = 1;
  optional TZTime start = 2;
  optional TZTime end = 3;
}

message TZReport {
  optional int32 id = 1 [default = 0];
  optional int32 vid = 2 [default = 0];
  optional int32 job_id = 3 [default = 0];
  optional string title = 4;
  optional string description = 5;
  optional int32 assigned_to = 6; // user id in drupal
  optional int32 begin_time = 7 [deprecated=true];
  optional int32 end_time = 8 [deprecated=true];
  optional int32 break_duration = 9; // in seconds
  optional int32 flags = 10; // TZFlags
  optional int32 changed = 11; // epoch timestamp
  optional TZTimeSpan worked_time = 12;
  optional string signature = 16;
  optional string comments = 17;
  optional int32 travel_duration = 18; // in seconds
  optional int32 travel_km = 19;

  // Permissions //
  // The user may remove this report.
  optional bool may_remove = 20 [default = false];
  // The user may edit and submit this report
  optional bool may_edit = 21 [default = false];
  // The user may reset this report to original values
  optional bool may_reset = 22 [default = false];
}

message TZJob {
  optional int32 id = 1 [default = 0];
  optional int32 parent_id = 2;
  optional int32 flags = 3;
  optional string job_code = 4;
  optional string title = 5;
  optional string description = 6;
  optional int32 changed = 7; // epoch timestamp
  optional TZJobType job_type = 8;

  // Permissions //
  // User may create a subjob.
  optional bool may_create_child = 18 [default = false];
  // User may create a report linked to this job
  optional bool may_create_report = 19 [default = false];
  optional bool may_edit = 20 [default = false]; // User may modify this job.
}

message TZUser {
  optional int32 id = 1 [default = 0];
  optional string username = 2;
  optional string realname = 3;
  optional string email = 4;

  // Permissions //
  // User may create top level jobs.
  optional bool may_create_job = 16 [default = false];
  // User may create new reports
  optional bool may_create_reports = 17 [default = false];
  // User may create new availability
  optional bool may_create_availability = 18 [default = false];
}

enum TZAvailabilityType {
  AVAILABLE = 0;
  NOT_AVAILABLE = 1;
}

message TZAvailability {
  optional int32 id = 1;
  optional TZAvailabilityType type = 2;
  optional TZTimeSpan time_span = 3;
}

message TZAvailabilityInterval {
  optional TZTime start = 1;
  optional TZTime end = 2;
  optional bool exclusive = 3 [default = false];
}

// RPC messages

message TZGetUserCmd {
  optional int32 version_code = 1 [default = 0];
}

message TZSyncCmd {
  optional int32 last_sync = 1;
  repeated TZJob new_job = 2;
  repeated TZReport new_report = 3;
}

message TZGetReportCmd {
  // Exact report id to fetch, if set we will ignore all other filtering options
  optional int32 report_id = 1;

  // Fetch reports that have changed since timestamp (in epoch)
  optional int32 changed_after = 2 [default = 0];

  // Maximum number of elements to fetch, 0 for no limit
  optional int32 limit = 3 [default = 0];

  // Offset into dataset to fetch from
  optional int32 offset = 4 [default = 0];

  // Filters away all reports with flags larger than max_flag
  optional TZFlags max_flag = 5 [default = DELETED];

  // Only return reports with begin_time before this timestamp
  optional int32 before = 6 [deprecated=true];

  // Only return reports with begin_time greater than or equal to this timestamp
  optional int32 after = 7 [deprecated=true];

  // Only return reports within this date range.
  optional TZDateRange date_range = 8;
}
message TZGetReportResult {
  // Only returned for ranged queries. (limit > 0)
  optional int32 total_report_count = 1;
  // Only returned for ranged queries. (limit > 0)
  optional int32 offset = 2;
  repeated TZReport report = 3;
}

message TZCreateReportCmd {
  optional TZReport new_report = 2;
}
message TZCreateReportResult {
  optional int32 id = 1;
}


message TZGetJobCmd {
  // Exact job id to fetch
  optional int32 job_id = 1;

  // Fetch jobs that have changed since timestamp
  optional int32 changed_after = 2;

  // Maximum number of elements to fetch, 0 for no limit
  optional int32 limit = 3;

  // Offset into dataset to fetch from
  optional int32 offset = 4;

  // Set to only fetch jobs with a specific value in may_create_report
  optional bool may_create_report = 5;
}
message TZGetJobResult {
  optional int32 total_job_count = 1;
  optional int32 offset = 2;
  repeated TZJob job = 3;
}

message TZCreateJobCmd {
  optional TZJob new_job = 1;
}
message TZCreateJobResult {
  optional int32 id = 1;
}

message TZGetAvailabilityCmd {
  optional int32 id = 1;
  // Only return availability within this date range.
  optional TZDateRange date_range = 2;
}

message TZGetAvailabilityResult {
  repeated TZAvailability availability = 1;
}

message TZSaveAvailabilityCmd {
  // Only return availability within this date range.
  optional TZAvailability availability = 1;
}

message TZSaveAvailabilityResult {
  optional int32 id = 1;
}

message TZDeleteAvailabilityCmd {
  optional int32 id = 1;
}

message TZGetAvailabilityIntervalsCmd {
  optional int32 unused = 1;
}

message TZGetAvailabilityIntervalsResult {
  optional bool enabled = 1 [default = false];
  repeated TZAvailabilityInterval interval = 2;
  optional int32 days_in_advance = 3 [default = 0];
}

message TZGetReportTemplatesCmd {
  optional int32 unused = 1;
}

message TZGetReportTemplatesResult {
  repeated TZReport report = 1;
}

// Generic single RPC command, must be wrapped in a TZRequest
message TZCommand {
  optional int32 client_handle = 1 [default = 0]; // request id from client for tracking

  // Commands
  optional TZGetUserCmd get_user_cmd = 2;
  optional TZSyncCmd sync_cmd = 3;

  optional TZGetReportCmd get_report_cmd = 4;
  optional TZCreateReportCmd create_report_cmd = 5;

  optional TZGetJobCmd get_job_cmd = 6;
  optional TZCreateJobCmd create_job_cmd = 7;

  optional TZGetAvailabilityCmd get_availability_cmd = 8;
  optional TZSaveAvailabilityCmd save_availability_cmd = 9;
  optional TZDeleteAvailabilityCmd delete_availability_cmd = 10;
  optional TZGetAvailabilityIntervalsCmd get_availability_intervals_cmd = 11;

  optional TZGetReportTemplatesCmd get_report_templates_cmd = 12;
}

// Generic single RPC result, must be wrapped in a TZResponse
message TZResult {
  optional int32 client_handle = 1 [default = 0]; // same as for TZCommand
  optional int32 error_code = 2;
  optional string error_msg = 3;

  // Response for TZGetUserCmd
  optional TZUser user = 4;

  // Response for TZSyncCmd
  repeated TZReport report = 5;
  repeated TZJob job = 6;

  optional TZGetReportResult get_report_result = 7;
  optional TZCreateReportResult create_report_result = 8;

  optional TZGetJobResult get_job_result = 9;
  optional TZCreateJobResult create_job_result = 10;

  optional TZGetAvailabilityResult get_availability_result = 11;
  optional TZSaveAvailabilityResult save_availability_result = 12;
  optional TZGetAvailabilityIntervalsResult get_availability_intervals_result = 13;

  optional TZGetReportTemplatesResult get_report_templates_result = 14;
}

//
// RPC wrappers
//

// Generic pipe-lined RPC command
message TZRequest {
  optional string username = 1;
  optional string password = 2;
  repeated TZCommand command = 3;
}

// Generic pipe-lined RPC result
message TZResponse {
  repeated TZResult result = 1;
  optional int32 timestamp = 2;
}
