<?php
/**
 * Provides TimeZynk data types
 */

require_once dirname(__FILE__) . '/tzbase.autoload.inc';

/**
 * Flag marking that a time report for this job needs a signature at every submission
 */
define('TZJOB_SIGNATURE_EVERY_POST', 1);

/**
 * Implementation of hook_help().
 */
function tzbase_help($path, $arg) {
  switch ($path) {
    case 'admin/help#tzbase':
      return '<p>' . t('Provides TimeZynk data types and relations') . '</p>';
    case 'admin/modules#description':
      return '<p>' . t('Provides TimeZynk data types and relations') . '</p>';
  }
}

/**
 * Implementation of hook_menu()
 */
function tzbase_menu() {
  $items['admin/content/timezynk'] = array(
    'title' => 'TimeZynk content',
    'description' => 'Handle TimeZynk content.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tzbase_admin_content'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/tzbase.admin.inc',
  );
  $items['admin/settings/timezynk'] = array(
    'title' => 'TimeZynk',
    'description' => 'Configure TimeZynk modules.',
    'page callback' => 'tzbase_admin_settings_block',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/tzbase.admin.inc',
  );
  $items['admin/settings/timezynk/availability'] = array(
    'title' => 'Availability',
    'description' => 'Configure TimeZynk availability.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tzbase_availability_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/availability_admin.inc',
  );
  $items['user_jobs'] = array(
    'title' => 'User Jobs',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tzbase_user_jobs_form'),
    'access arguments' => array('manage user job mappings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/tzbase.userjobs.inc',
  );
  $items['user_jobs/%/delete'] = array(
    'title' => 'User Jobs',
    'page callback' => 'tzbase_user_jobs_delete',
    'page arguments' => array(1),
    'access arguments' => array('manage user job mappings'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/tzbase.userjobs.inc',
  );
  $items['availability'] = array(
    'title' => 'Availability',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tzbase_availability_form'),
    'access arguments' => array('view any availability content'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/tzbase.availability.inc',
  );
  $items['availability/data'] = array(
    'page callback' => 'tzbase_availability_data',
    'access arguments' => array('view any availability content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/tzbase.availability.inc',
  );
  return $items;
}

/**
 * Implementation of hook_node_info()
 */
function tzbase_node_info() {
  return array(
    'tzreport' => array(
      'name' => t('Time Report'),
      'module' => 'tzbase',
      'description' => t('A time report for a specific project'),
      'has_title' => TRUE,
      'title_label' => t('Description'),
      'has_body' => TRUE,
      'body_label' => t('Comments'),
    ),
    'tzjob' => array(
      'name' => t('Job'),
      'module' => 'tzbase',
      'description' => t('A job that you can report time on'),
      'has_title' => TRUE,
      'title_label' => t('Subject'),
      'has_body' => TRUE,
      'body_label' => t('Description'),
    ),
  );
}

/**
 * Implementation of hook_perm()
 */
function tzbase_perm() {
  return array(
    'create tzreport content',
    'view any tzreport content',
    'view own tzreport content',
    'edit any tzreport content',
    'edit own tzreport content',
    'remove own tzreport content',
  	'create tzreport on any tzjob',

    'create tzjob content',
    'view any tzjob content',
    'view own tzjob content',
    'edit any tzjob content',
    'edit own tzjob content',

    'create availability content',
    'view any availability content',
    'view own availability content',
    'remove own availability content',

    'manage user job mappings',
  );
}

/**
 * Implementation of hook_access()
 */
function tzbase_access($op, $node, $account) {
  $is_author = FALSE;
  if (is_object($node)) {
    if($node->type == 'tzreport') {
      $is_author = $account->uid === $node->assignedto;
    } else {
      $is_author = $account->uid === $node->uid;
    }
  }
  switch($op) {
    case 'create':
      return user_access('create ' . $node . ' content', $account);

    case 'view':
      if(user_access('view any ' . $node->type . ' content', $account)) {
        return true;
      }
      else if($is_author) {
        return user_access('view own ' . $node->type . ' content', $account);
      }
      else {
        return false;
      }

    case 'update':
      if(user_access('edit any ' . $node->type . ' content', $account)) {
        return true;
      }
      else if($is_author) {
        return user_access('edit own ' . $node->type . ' content', $account);
      }
      else {
        return false;
      }

    case 'delete':
      /* Only super-user can delete reports and jobs */
      return FALSE;
  }
}

/**
 * Implementation of hook_views_api.
 * The rest of the hooks are in tzbase.views.inc
 */
function tzbase_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'tzbase') . '/includes/views',
  );
}

/**
 * Implementation of hook_date_api_fields().
 *
 * Registers the begintime field so the date can be used by
 * the Date API views date argument and date filter.
 */
function tzbase_date_api_fields($field) {
  if($field == 'tzreport.begintime') {
    return array(
      // The type of date: DATE_UNIX, DATE_ISO, DATE_DATETIME.
      'sql_type' => DATE_UNIX,
      // Timezone handling options: 'none', 'site', 'date', 'utc'.
      'tz_handling' => 'site',
      // Needed only for dates that use 'date' tz_handling.
      'timezone_field' => '',
      // Needed only for dates that use 'date' tz_handling.
      'offset_field' => '',
      // Array of "table.field" values for related fields that should be
      // loaded automatically in the Views SQL.
      'related_fields' => array(),
      // Granularity of this date field's db data.
      'granularity' => array('year', 'month', 'day', 'hour', 'minute', 'second'),
    );
  }
}

/**
 * Input forms for tzreport and tzjob nodes
 * @param Object $node
 */
function tzbase_form($node) {
  tzbase_include_proto_classes();
  $type = node_get_types('type', $node);

  $joboptions = tzbase_list_jobs();
  if(!$joboptions) {
    $joboptions[0] = t('-- No jobs available --');
  }

  if($type->type == 'tzreport') {
    $date = tzbase_make_date(empty($node->begintime) ? time() : $node->begintime);
    $form['workdate'] = array(
      '#type' => 'date',
      '#title' => t('Date'),
      '#default_value' => array(
        'year' => $date->format('Y'),
        'month' => $date->format('n'),
        'day' => $date->format('j'),
      ),
      '#weight' => -7,
    );

    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => FALSE,
      '#default_value' => isset($node->title) ? $node->title : '',
      '#weight' => -5,
      '#maxlength' => 255,
    );

    // Find current jobid
    $default_jobid = isset($node->jobid) ? $node->jobid : 0;
    foreach($joboptions as $key => $value) {
      $trail = explode(':', $key);
      if(end($trail) == $default_jobid) {
        $default_jobid = $key;
      }
    }
    $form['jobid'] = array(
      '#type' => 'select',
      '#title' => t('Select job'),
      '#default_value' => $default_jobid,
      '#options' => $joboptions,
      '#description' => t('Select the job that this time report concerns'),
      '#required' => FALSE,
      '#weight' => -6,
    );

    $assignedto_name = '';
    if(isset($node->assignedto)) {
      $assignedto = user_load(array('uid' => $node->assignedto));
      $assignedto_name = $assignedto->name;
    } else {
      global $user;
      $assignedto_name = $user->name;
    }

    $form['assignedto_name'] = array(
      '#type' => 'textfield',
      '#access' => user_access('edit any tzreport content'),
      '#title' => t('Assigned to user'),
      '#default_value' => $assignedto_name,
      '#autocomplete_path' => 'user/autocomplete',
      '#maxlength' => 60,
      '#required' => FALSE,
      '#weight' => -4,
    );

    $form['time'] = array(
      '#type' => 'fieldset',
      '#title' => t('Time'),
      '#weight' => -3,
      '#collapsible' => TRUE,
      '#tree' => TRUE,
    );

    // Format time according to current timezone
    $timestring = '00:00';
    if(!empty($node->begintime)) {
      $timestring = tzbase_make_date($node->begintime)->format('H:i');
    }
    $form['time']['begintime'] = array(
      '#type' => 'textfield',
      '#title' => t('Start time'),
      '#default_value' => $timestring,
      '#required' => TRUE,
      '#maxlength' => 5,
      '#size' => 5,
      '#weight' => 0,
    );

    $timestring = '00:00';
    if(!empty($node->endtime)) {
      $timestring = tzbase_make_date($node->endtime)->format('H:i');
    }
    $form['time']['endtime'] = array(
      '#type' => 'textfield',
      '#title' => t('End time'),
      '#default_value' => $timestring,
      '#size' => 5,
      '#maxlength' => 5,
      '#required' => TRUE,
      '#weight' => 1,
    );

    $form['time']['breakduration'] = array(
      '#type' => 'textfield',
      '#title' => t('Break duration'),
      '#default_value' => isset($node->breakduration) ? tzbase_format_duration($node->breakduration) : '00:00',
      '#size' => 5,
      '#maxlength' => 5,
      '#required' => FALSE,
      '#weight' => 2,
    );

    $form['travel'] = array(
      '#type' => 'fieldset',
      '#title' => t('Travel information'),
      '#weight' => -3,
      '#tree' => TRUE,
      '#collapsible' => TRUE,
    );
    $form['travel']['travelduration'] = array(
      '#type' => 'textfield',
      '#title' => t('Travel time'),
      '#default_value' => isset($node->travelduration) ? tzbase_format_duration($node->travelduration) : '00:00',
      '#size' => 5,
      '#maxlength' => 5,
      '#required' => FALSE,
      '#weight' => 0,
    );
    $form['travel']['travelkm'] = array(
      '#type' => 'textfield',
      '#title' => t('Travel length (km)'),
      '#default_value' => isset($node->travelkm) ? $node->travelkm : 0,
      '#size' => 5,
      '#required' => FALSE,
      '#weight' => 1,
    );

    /* List available flags.
     * If the user is not allowed to delete content, we will either
     * remove the DELETED flag from the list, or if the node is already
     * deleted keep it as the only available option.
     */
    $flag_options = tzbase_tzreport_list_flags();
    if(!user_access('remove own tzreport content')) {
      if(!empty($node->flags) && $node->flags == TZFlags::DELETED) {
        $flag_options = array(TZFlags::DELETED => 'DELETED');
      } else {
        unset($flag_options[TZFlags::DELETED]);
      }
    }
    $form['flags'] = array(
      '#type' => 'select',
      '#title' => t('Report status'),
      '#default_value' => isset($node->flags) ? $node->flags : TZFlags::CREATED,
      '#options' => $flag_options,
      '#required' => FALSE,
      '#weight' => -4,
    );

    $form['signature'] = array(
      '#type' => 'textfield',
      '#title' => t('Signature'),
      '#default_value' => isset($node->signature) ? $node->signature : '',
      '#required' => FALSE,
      '#weight' => -1,
      '#maxlength' => 255,
    );
    $form['body_filter']['body'] = array(
      '#type' => 'textarea',
      '#title' => check_plain($type->body_label),
      '#default_value' => isset($node->body) ? $node->body : '',
      '#rows' => 2,
      '#resizable' => TRUE,
      '#required' => FALSE,
    );
    $form['body_filter']['filter'] = filter_form($node->format);

    $form['#submit'][] = 'tzbase_tzreport_submit';

    return $form;
  }
  else if($type->type == 'tzjob') {
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#weight' => -5,
      '#maxlength' => 255,
    );
    $form['jobcode'] = array(
      '#type' => 'textfield',
      '#title' => t('Administrative assignment code'),
      '#required' => FALSE,
      '#default_value' => isset($node->jobcode) ? $node->jobcode : '',
      '#weight' => -4,
      '#maxlength' => 60,
    );

    array_unshift($joboptions, '<' . t('Top level assignment') . '>');
    $default_parentid = isset($node->parentid) ? $node->parentid : 0;
    if(isset($node->nid)) {
      foreach($joboptions as $key => $value) {
        $trail = explode(':', $key);
        if(array_search($node->nid, $trail)) {
          unset($joboptions[$key]);
        } elseif(end($trail) == $default_parentid) {
          $default_parentid = $key;
        }
      }
    }
    $form['parentid'] = array(
      '#type' => 'select',
      '#title' => t('Parent job'),
      '#required' => FALSE,
      '#default_value' => $default_parentid,
      '#options' => $joboptions,
      '#weight' => -3,
      '#maxlength' => 60,
    );

    $form['body_filter']['#weight'] = -2;
    $form['body_filter']['body'] = array(
      '#type' => 'textarea',
      '#title' => check_plain($type->body_label),
      '#default_value' => $node->body,
      '#rows' => 2,
      '#resizeable' => TRUE,
      '#required' => FALSE,
    );
    $form['body_filter']['filter'] = filter_form($node->format);

    $form['active'] = array(
      '#type' => 'checkbox',
      '#title' => t('Assignment active'),
      '#description' => t('Check if this assignment is active and can be used for time reporting'),
      '#default_value' => isset($node->flags) ? ($node->flags != TZJobFlags::INACTIVE) : TRUE,
      '#required' => FALSE,
    );

    $form['allow_overlap'] = array(
      '#type' => 'checkbox',
      '#title' => t('Allow reports to overlap'),
      '#description' => t('Allow reports on this assignment to overlap other reports'),
      '#default_value' => $node->allow_overlap,
      '#required' => FALSE,
    );

    return $form;
  }
}

function tzbase_theme() {
  return array(
    'assignment_path' => array(
      'arguments' => array('jobid' => 0),
    ),
    'tzbase_user_jobs_form' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * Handle validation of tzbase node form
 * @param Array $form
 * @param Array $form_state
 */
function tzbase_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if($node->type === 'tzreport') {
    if($op === 'presave') {
      if($node->jobid) {
        $jobid = explode(':', $node->jobid);
        $node->jobid = intval(end($jobid));
      }

      if(empty($node->title)) {
        $job = node_load($node->jobid);
        $node->title = $job->title;
      }

      if(isset($node->workdate) && is_array($node->workdate) && isset($node->time) && is_array($node->time)) {
        $date = $node->workdate;
        foreach(array('begintime', 'endtime') as $field) {
          $time = explode(':', $node->time[$field]);
          $isostr = sprintf('%04d-%02d-%02d %02d:%02d', $date['year'], $date['month'], $date['day'], intval($time[0]), intval($time[1]));
          $node->$field = date_make_date($isostr)->format('U');
        }
        $node->breakduration = tzbase_parse_duration($node->time['breakduration']);
      }

      // move endtime forward one day if we are working past midnight
      // Cannot just add a number of seconds since it might pass DST
      if (!empty($node->endtime) && !empty($node->begintime)) {
        $begin_datetime = tzbase_make_date($node->begintime);
        $end_datetime = tzbase_make_date($node->endtime);
        _tzbase_validate_duration_no_greater_than_a_day($begin_datetime, $end_datetime, $node);
        _tzbase_validate_end_after_start($begin_datetime, $end_datetime, $node);

        $node->endtime = _tzbase_calculate_correct_endtime($begin_datetime, $end_datetime);
      }else {
        watchdog('tzbase',
                 'Report (nid: @id, vid: @vid) missing begintime or endtime in tzbase_nodeapi',
                 array(
                      '@id' => empty($node->nid) ? 'new node' : $node->nid,
                      '@vid' => empty($node->vid) ? 'new node' : $node->vid,
                 ),
                 WATCHDOG_WARNING,
                 empty($node->nid) ? NULL : l('Node','node/' . $node->nid));
      }


      if(isset($node->travel) && is_array($node->travel)) {
        $node->travelduration = tzbase_parse_duration($node->travel['travelduration']);
        $node->travelkm = intval($node->travel['travelkm']);
      }

      if(isset($node->assignedto_name)) {
        $assignedto = user_load(array('name' => $node->assignedto_name));
        $node->assignedto = $assignedto->uid;
      }
    }
  } elseif($node->type === 'tzjob') {
    if($op === 'presave') {
      tzbase_include_proto_classes();

      if($node->parentid) {
        $jobid = explode(':', $node->parentid);
        $node->parentid = intval(end($jobid));
      }

      if(isset($node->active)) {
        if($node->active) {
          $node->flags = TZJobFlags::ACTIVE;
        } else {
          $node->flags = TZJobFlags::INACTIVE;
        }
      }
      if(!isset($node->flags)) {
        $node->flags = TZJobFlags::ACTIVE;
      }
    }
  }
}

function tzbase_view($node, $teaser = FALSE, $page = FALSE) {
  if ($node->type == 'tzreport') {
    return tzbase_tzreport_view($node, $teaser, $page);
  } else if ($node->type == 'tzjob') {
    return tzbase_tzjob_view($node, $teaser, $page);
  }
}

function tzbase_tzreport_view($node, $teaser = FALSE, $page = FALSE) {
  if ($page) {
    $breadcrumb = array();
    $breadcrumb[] = l(t('Home'), NULL);
    $breadcrumb[] = l(t('Time Reports'), 'timereports');
    drupal_set_breadcrumb($breadcrumb);
  }

  $node = node_prepare($node, $teaser);
  $begindate = tzbase_make_date($node->begintime);
  $enddate = tzbase_make_date($node->endtime);

  $full_name = db_result(db_query('SELECT fullname FROM tzuser WHERE uid = %d', $node->assignedto));
  if (!empty($full_name)) {
    $node->content['name'] = tzbase_node_content_entry(t('Name'), check_plain($full_name), 0);
  }

  $node->content['assignment'] = tzbase_node_content_entry(t('Assignment'), theme('assignment_path', $node->jobid), 1);
  $node->content['date'] = tzbase_node_content_entry(t('Date'), $begindate->format('Y-m-d'), 2);
  $node->content['start'] = tzbase_node_content_entry(t('Start'), $begindate->format('H:i'), 3);
  $node->content['end'] = tzbase_node_content_entry(t('End'), $enddate->format('H:i'), 4);
  $node->content['break'] = tzbase_node_content_entry(t('Break'), tzbase_format_duration($node->breakduration), 5);
  $node->content['total'] = tzbase_node_content_entry(t('Total'), tzbase_format_duration($node->totalduration), 6);
  $node->content['status'] = tzbase_node_content_entry(t('Status'), tzbase_format_tzreport_flags($node->flags), 7);

  return $node;
}

function tzbase_tzjob_view($node, $teaser = FALSE, $page = FALSE) {
  return node_prepare($node, $teaser);
}

function tzbase_node_content_entry($heading, $value, $weight = 1) {
  return array(
    '#prefix' => '<div>',
    '#value' => '<strong>' . $heading . '</strong>: ' . $value,
    '#suffix' => '</div>',
    '#weight' => $weight,
  );
}

/**
 * Implementation of hook_insert()
 */
function tzbase_insert($node) {
  if($node->type == 'tzreport') {
    $node->totalduration = tzbase_compute_total_duration($node);
  }
  drupal_write_record($node->type, $node);
}

/**
 * Implementation of hook_update()
 */
function tzbase_update($node) {
  if(isset($node->revision) && $node->revision) {
    tzbase_insert($node);
  }
  else {
    if($node->type == 'tzreport') {
      $node->totalduration = tzbase_compute_total_duration($node);
    }
    drupal_write_record($node->type, $node, 'vid');
  }
}

/**
 * Implementation of hook_delete()
 */
function tzbase_delete($node) {
  if($node->type == 'tzreport') {
    db_query("DELETE FROM {tzreport} WHERE nid = %d", $node->nid);
  }
  else if($node->type == 'tzjob') {
    db_query("DELETE FROM {tzjob} WHERE nid = %d", $node->nid);

    // Also delete dependent job mappings
    $mapper = tzbase_user_jobs_mapper();
    $mapper->deleteAllByJobID($node->nid);
  }
}

/**
 * Implementation of hook_load()
 */
function tzbase_load($node) {
  if($node->type == 'tzreport') {
    return db_fetch_object(db_query("SELECT * FROM {tzreport} WHERE vid = %d", $node->vid));
  }
  else if($node->type == 'tzjob') {
    return db_fetch_object(db_query("SELECT * FROM {tzjob} WHERE vid = %d", $node->vid));
  }
}

/**
 * Implementation of hook_user()
 */
function tzbase_user($op, &$edit, &$account, $category = NULL) {
  if ($op == "delete") {
    // Delete dependent job mappings when user is deleted
    $mapper = tzbase_user_jobs_mapper();
    $mapper->deleteAllByUserID($account->uid);
  }
}

function tzbase_job_by_jobcode($jobcode) {
  return node_load(db_result(db_query("SELECT nid FROM {tzjob} WHERE jobcode = '%s'", $jobcode)));
}

function tzbase_include_proto_classes() {
  $pb4php_path = libraries_get_path('pb4php');
  require_once $pb4php_path . '/message/pb_message.php';
  require_once dirname(__FILE__) . '/pb_proto_tzbase.php';
}

function tzbase_compute_total_duration($node) {
  $begintime = $endtime = $breakduration = 0;
  if(isset($node->begintime) && $node->begintime) {
    $begintime = $node->begintime;
  }
  if(isset($node->endtime) && $node->endtime) {
    $endtime = $node->endtime;
  }
  if(isset($node->breakduration) && $node->breakduration) {
    $breakduration = $node->breakduration;
  }
  return $endtime - $begintime - $breakduration;
}

/**
 * Prints a duration as HH:MM
 * @param int $duration number of seconds in duration
 */
function tzbase_format_duration($duration) {
  if(!$duration) {
    $duration = 0;
  }
  $hours = (int)($duration/3600);
  $minutes = (int)(($duration - $hours*3600)/60);
  return sprintf("%02d:%02d", $hours, $minutes);
}

/**
 * Parse a time duration on the format 'HH:MM' into number of seconds
 */
function tzbase_parse_duration($hhmm) {
  $seconds = 0;
  $match = array();
  if(preg_match('/^(\d+):(\d+)$/', $hhmm, $match)) {
    $seconds += intval($match[1]) * 3600;
    $seconds += intval($match[2]) * 60;
  }
  return $seconds;
}

/**
 * Make a DateTime object from a UNIX timestamp, using
 * the site-wide timezone settings.
 * @param int $timestamp UNIX timestamp
 */
function tzbase_make_date($timestamp = NULL) {
  $timezone = date_default_timezone(FALSE);

  if($timestamp === NULL) {
    $timestamp = time();
  }

  if($timestamp === 0) {
    return new DateTime('@0', $timezone);
  }

  return date_make_date($timestamp, $timezone, DATE_UNIX);
}


/**
 * List all tzreport flags in a value => flag array
 */
function tzbase_tzreport_list_flags() {
  tzbase_include_proto_classes();
  $flags = array();
  $flagClass = new ReflectionClass('TZFlags');
  $parentClass = $flagClass->getParentClass();
  foreach($flagClass->getConstants() as $flag => $value) {
    if(!$parentClass->hasConstant($flag)) {
      $flags[$value] = $flag;
    }
  }
  return $flags;
}

/**
 * Format tzreport flags as a string
 * @param int $flags
 */
function tzbase_format_tzreport_flags($flags) {
  $flaglist = tzbase_tzreport_list_flags();
  return $flaglist[$flags];
}

function tzbase_children_for_jobid($jobid) {
  $children = array($jobid);
  $result = db_query('SELECT n.nid FROM {node} n INNER JOIN {tzjob} tzj ON n.vid = tzj.vid WHERE tzj.parentid = %d', $jobid);
  while ($nid = db_result($result)) {
    $children = array_merge($children, tzbase_children_for_jobid($nid));
  }
  return $children;
}

function theme_assignment_path($jobid) {
  static $assignment_path = array();

  if (empty($assignment_path[$jobid])) {
    $result = db_query('SELECT * FROM {node} n INNER JOIN {tzjob} tzj ON n.vid = tzj.vid WHERE n.nid = %d', $jobid);
    $job = db_fetch_object($result);
    if (!$job) {
      return 'Job not found!!';
    }

    $path = '';
    if ($job->parentid) {
      $path .= theme('assignment_path', $job->parentid) . ' &raquo; ';
    }
    $path .= $job->title;

    $assignment_path[$jobid] = $path;
  }

  return $assignment_path[$jobid];
}

/**
 * Fetch a hierachy of tzjob nodes. Will return an array with keys like
 *
 * 'nid:0:1' => 'node 1 title'
 * 'nid:0:1:2' => 'child of node 1'
 * 'nid:0:3' => 'sibling of node 1'
 *
 * @param int $parentjobid
 * @param string $prefix
 * @param string $trail
 */
function tzbase_list_jobs($parentjobid = 0, $prefix = '', $trail = 'nid:') {
  $list = array();
  $trail = $trail . $parentjobid . ':';
  $sql = db_rewrite_sql("SELECT n.nid, title FROM {node} n INNER JOIN {tzjob} t ON n.vid = t.vid WHERE t.parentid = %d ORDER BY title");
  $result = db_query($sql, $parentjobid);
  while($data = db_fetch_object($result)) {
    $list[$trail . $data->nid] = $prefix . $data->title;
    $children = tzbase_list_jobs($data->nid, $prefix . '--', $trail);
    if($children) {
      $list = array_merge($list, $children);
    }
  }
  return $list;
}

function tzbase_watchdog_with_data($tag, $message, $data, $logLevel = WATCHDOG_INFO) {
  $actual_filename = 0;

  if(!empty($data)) {
    $path = file_create_path('tzbase_debug');
    file_check_directory($path, FILE_CREATE_DIRECTORY);

    $date = tzbase_make_date();
    $filename = $date->format('c') . '.txt';
    $actual_filename = file_save_data($data, $path . '/' . $filename, FILE_EXISTS_RENAME);
  }

  if($actual_filename !== 0) {
    watchdog($tag, $message, array(), $logLevel,
      l('View', file_create_url($actual_filename)));
  } else {
    watchdog($tag, $message, array(), $logLevel);
  }
}

function tzbase_watchdog_node_operation($tag, $node, $operation, $account) {
  watchdog($tag, '!operation !type !nid',
             array(
               '!operation' => $operation,
               '!type' => $node->type,
               '!nid' => $node->nid
             ),
             WATCHDOG_NOTICE,
             l('Node', 'node/' . $node->nid) . ', ' . theme('username', $account));
}

function tzbase_db_wrapper() {
  static $dbWrapper = NULL;
  if (!$dbWrapper) {
    $dbWrapper = new TZDrupalDBWrapper();
  }
  return $dbWrapper;
}

function tzbase_user_jobs_mapper() {
  return new TZUserJobsMapper(tzbase_db_wrapper());
}

function tzbase_availability_store() {
  tzbase_include_proto_classes();
  return new AvailabilityStore(tzbase_db_wrapper());
}

function tzbase_add_progress_js() {
  jquery_ui_add(array('ui.core', 'ui.draggable', 'ui.dialog', 'ui.progressbar'));
  drupal_add_css(drupal_get_path('module', 'jquery_ui') . '/jquery.ui/themes/base/ui.all.css');
  drupal_add_js(drupal_get_path('module', 'tzbase') . '/javascript/json2.js');
  drupal_add_js(drupal_get_path('module', 'tzbase') . '/javascript/tzbase.progress.js');
}

function tzbase_http_server_vars() {
  $vars = array();
  foreach ($_SERVER as $key => $v) {
    if(substr($key, 0, 5) === 'HTTP_') {
      $vars[$key] = $v;
    }
  }
  return $vars;
}

function _tzbase_calculate_correct_endtime($begin_datetime, $end_datetime) {
  // Set the same date as for begintime, but keep the hour and minute for the endtime.
  $new_end_datetime = clone($begin_datetime);
  $new_end_datetime->setTime(intval($end_datetime->format('G'), 10),
                             intval($end_datetime->format('i'), 10),
                             intval($end_datetime->format('s'), 10));

  if ($new_end_datetime < $begin_datetime) {
    $new_end_datetime->modify('+1 day');
  }
  return $new_end_datetime->format('U');
}

function _tzbase_validate_duration_no_greater_than_a_day($begin_datetime, $end_datetime, $node) {
  $one_day_after_begin_datetime = clone($begin_datetime);
  $one_day_after_begin_datetime->modify('+1 day');

  if ($end_datetime > $one_day_after_begin_datetime) {
    watchdog('tzbase',
             'Report (nid: @id, vid: @vid) spans more than 24 hours.' .
             'Some module does not clean up its input. Adjusting the report.',
             array(
                  '@id' => empty($node->nid) ? 'new node' : $node->nid,
                  '@vid' => empty($node->vid) ? 'new node' : $node->vid,
             ),
             WATCHDOG_ERROR,
             empty($node->nid) ? NULL : l('Node','node/' . $node->nid));
  }
}
function _tzbase_validate_end_after_start($begin_datetime, $end_datetime, $node) {
  if ($end_datetime < $begin_datetime) {
    watchdog('tzbase',
             'Report (nid: @id, vid: @vid) ends before it starts.' .
             'Some module does not clean up its input. Adjusting the report.',
             array(
                  '@id' => empty($node->nid) ? 'new node' : $node->nid,
                  '@vid' => empty($node->vid) ? 'new node' : $node->vid,
             ),
             WATCHDOG_ERROR,
             empty($node->nid) ? NULL : l('Node','node/' . $node->nid));
  }
}
