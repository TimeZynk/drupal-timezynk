<?php
/**
 * @file Installation file for TimeZynk data types
 */

/**
 * Implementation of hook_install()
 */
function tzbase_install() {
  drupal_install_schema('tzbase');

  // Set up both content types as group posts if OG is installed
  if(module_exists('og')) {
  	variable_set('og_content_type_usage_'. 'tzreport', 'group_post_standard');
  	variable_set('og_content_type_usage_'. 'tzjob', 'group_post_standard');
  }

  // Setup default node flags
  // tzreport not promoted to front page, and create a new revision on every save
  variable_set('node_options_tzreport', array('status', 'revision'));
  // tzjob not promoted to front page
  variable_set('node_options_tzjob', array('status'));
}

/**
 * Implementation of hook_uninstall()
 */
function tzbase_uninstall() {
  // remove group post settings
  foreach(array('tzreport', 'tzjob') as $type) {
    if('group_post_standard' == variable_get('og_content_type_usage_'. $type, 'omitted')) {
      variable_del('og_content_type_usage_'. $type);
    }
  }

  drupal_uninstall_schema('tzbase');
}

function tzbase_requirements($phase) {
  $req = array();

  if($phase == 'runtime') {
    /* Check installation of pb4php library */
    _tzbase_add_requirement($req, 'pb4php', 'message/pb_message.php');
  }
  return $req;
}

function _tzbase_add_requirement(&$req, $name, $file) {
  $idiorm_path = libraries_get_path($name);

  $req[$name]['title'] = $name;
  if(is_file($idiorm_path . '/' . $file)) {
    $req[$name]['value'] = $name . ' installed under ' . $idiorm_path;
    $req[$name]['severity'] = REQUIREMENT_OK;
  } else {
    $req[$name]['value'] = t('Not found');
    $req[$name]['description'] = 'Please install' . $name . ' under sites/all/libraries/' . $name . '.';
    $req[$name]['severity'] = REQUIREMENT_ERROR;
  }
}

/**
 * First update, adds assignedto field pointing to assigned User UID.
 */
function tzbase_update_6001() {
  $ret = array();
  db_add_field($ret, 'tzreport', 'assignedto', array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => t('The {user}.uid that is assigned to this report'),
      ));

  return $ret;
}

/**
 * Second update, adds totalduration field with computed duration.
 * It is stored in the database to support views integration.
 */
function tzbase_update_6002() {
  $ret = array();
  db_add_field($ret, 'tzreport', 'totalduration', array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('Total duration in seconds'),
      ));
  db_query('UPDATE {tzreport} SET totalduration = (endtime - begintime - breakduration)');
  return $ret;
}

function tzbase_update_6003() {
  $ret = array();
  db_add_index($ret, 'tzreport', 'assignedto_flags', array('assignedto', 'flags'));
  return $ret;
}

function tzbase_update_6004() {
  $ret = array();
  db_add_index($ret, 'tzreport', 'begintime', array('begintime'));
  return $ret;
}

function tzbase_update_6005() {
  $ret = array();
  $result = db_query('SELECT * FROM {tzreport} WHERE endtime < begintime');
  while($row = db_fetch_object($result)) {
    $end_datetime = tzbase_make_date($row->endtime);
    $end_datetime->modify('+1 day');
    $row->endtime = $end_datetime->format('U');
    db_query('UPDATE {tzreport} SET endtime = %d WHERE vid = %d', $row->endtime, $row->vid);
    db_query('UPDATE {tzreport} SET totalduration = (endtime - begintime - breakduration) WHERE vid = %d',
             $row->vid);
  }

  return $ret;
}

function tzbase_update_6006() {
  $ret = array();

  $schema['tzavailability'] = array(
    'description' => t('Stores availability information'),
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "{users}.uid.",
      ),
      'availability_type' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "AvailabilityType",
      ),
      'start_time' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('Start timestamp'),
      ),
      'end_time' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('End timestamp'),
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'uid' => array('uid'),
    ),
  );

  db_create_table($ret, 'tzavailability', $schema['tzavailability']);
  return $ret;
}

function tzbase_update_6007() {
  $ret = array();
  $schema['tzusers_tzjobs'] = array(
    'description' => t('Stores availability information'),
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => "{users}.uid.",
      ),
      'jobid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => "{tzjob}.nid",
      ),
      'start_time' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'description' => t('Start timestamp'),
      ),
      'end_time' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'description' => t('End timestamp'),
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'uid_jobid' => array('uid', 'jobid'),
    ),
  );
  db_create_table($ret, 'tzusers_tzjobs', $schema['tzusers_tzjobs']);
  return $ret;
}

/**
 * Implementation of hook_schema()
 */
function tzbase_schema() {
  $schema['tzreport'] = array(
    'description' => t('Stores a TimeZynk time report connected to a specific assignment'),
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('The {node}.nid'),
      ),
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('The {node_revision}.vid'),
      ),
      'jobid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => t('The {tzjob}.nid'),
      ),
      'assignedto' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => t('The {user}.uid that is assigned to this report'),
      ),
      'begintime' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('Timestamp for the beginning'),
      ),
      'endtime' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('Timestamp for the end'),
      ),
      'breakduration' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('Total break time in seconds'),
      ),
      'totalduration' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('Total duration in seconds'),
      ),
      'travelduration' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('Total travel time in seconds'),
      ),
      'travelkm' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('Total travel length in kilometers'),
      ),
      'signature' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => t('Signature text'),
      ),
      'flags' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('Bit-combined flags'),
      ),
    ),
    'primary key' => array('nid', 'vid'),
    'unique keys' => array('vid' => array('vid')),
    'indexes' => array(
      'nid' => array('nid'),
      'assignedto_flags' => array('assignedto', 'flags'),
      'begintime' => array('begintime'),
    ),
  );

  $schema['tzjob'] = array(
    'description' => t('Stores a TimeZynk time report connected to a specific assignment'),
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('The {node}.nid'),
      ),
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('The {node_revision}.vid'),
      ),
      'jobcode' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => t('Account code for this job'),
      ),
      'parentid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => t('The {tzjob}.nid of the parent job'),
      ),
      'flags' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('Bit-combined flags'),
      ),
    ),
    'primary key' => array('nid', 'vid'),
    'unique keys' => array('vid' => array('vid')),
    'indexes' => array('nid' => array('nid')),
  );

  $schema['tzavailability'] = array(
    'description' => t('Stores availability information'),
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "{users}.uid.",
      ),
      'availability_type' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "AvailabilityType",
      ),
      'start_time' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('Start timestamp'),
      ),
      'end_time' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('End timestamp'),
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'uid' => array('uid'),
    ),
  );

  $schema['tzusers_tzjobs'] = array(
    'description' => t('Stores availability information'),
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => "{users}.uid.",
      ),
      'jobid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => "{tzjob}.nid",
      ),
      'start_time' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'description' => t('Start timestamp'),
      ),
      'end_time' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'description' => t('End timestamp'),
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'uid_jobid' => array('uid', 'jobid'),
    ),
  );

  return $schema;
}
