<?php

/**
 * @file
 * tzbase tests.
 */
class TZBaseTestCase extends DrupalWebTestCase {
  private $test_user = NULL;

  public static function getInfo() {
    return array(
      'name' => 'TZBase Test Suite',
      'description' => '',
      'group' => 'TZBase',
    );
  }

  public function setUp() {
    // Enable any modules required for the test.
   parent::setUp('libraries', 'date_timezone', 'date_api', 'tzbase');

   /* For the DST checks below to work properly, we need to setup the
    * default timezone */
   $admin = $this->drupalCreateUser(array('administer site configuration'));
   $this->drupalLogin($admin);
   $form['date_default_timezone_name'] = 'Europe/Stockholm';
   $this->drupalPost('admin/settings/date-time', $form, t('Save configuration'));
   $this->drupalLogout();

   // Create and test user
   $this->test_user = $this->drupalCreateUser(array(
     'create tzjob content', 'create tzreport content', 'edit any tzjob content', 'edit any tzreport content', 'edit own tzjob content', 'edit own tzreport content', 'view any tzjob content', 'view any tzreport content', 'view own tzjob content', 'view own tzreport content'
   ));
   $this->drupalLogin($this->test_user);
  }

  public function tearDown() {
    parent::tearDown();
    $this->test_user = NULL;
  }

  public function testPostTimeZynkData() {
    $jobid = $this->doTestPostSimpleJob();
    $this->assertTrue($jobid, 'Expected valid id, got ' . $jobid);

    $reportid = $this->doTestPostSimpleReport($jobid);
    $this->assertTrue($reportid, 'Expected valid id, got ' . $reportid);

    $reportid = $this->doTestPostMidnightReport($jobid);
    $this->assertTrue($reportid, 'Expected valid id, got ' . $reportid);

    $reportid = $this->doTestPostDSTSpringReport($jobid);
    $this->assertTrue($reportid, 'Expected valid id, got ' . $reportid);

    $reportid = $this->doTestPostDSTAutumnReport($jobid);
    $this->assertTrue($reportid, 'Expected valid id, got ' . $reportid);
  }

  private function doTestPostSimpleJob() {
    $edit['title'] = 'Simple Job';
    $edit['jobcode'] = 'abcde';
    $edit['parentid'] = '0';
    return $this->addNode('tzjob', $edit);
  }

  private function doTestPostSimpleReport($jobid) {
    $now = date_make_date('now');
    $edit['title'] = 'Simple Report';
    $edit['workdate[month]'] = $now->format('n');
    $edit['workdate[day]'] = $now->format('j');
    $edit['workdate[year]'] = $now->format('Y');
    $edit['jobid'] = 'nid:0:' . $jobid;
    $edit['assignedto_name'] = $this->test_user->name;
    $edit['flags'] = 0;
    $edit['time[begintime]'] = '9:15';
    $edit['time[endtime]'] = '18:00';
    $edit['time[breakduration]'] = '03:45';
    $edit['travel[travelduration]'] = '01:25';
    $edit['travel[travelkm]'] = '152';
    $edit['signature'] = 'abcdef';
    $edit['body'] = "test text in\ncomments field";
    $nid = $this->addNode('tzreport', $edit);

    $node = node_load($nid);
    $begintime = tzbase_make_date($node->begintime);
    $this->assertEqual($now->format('Y-m-d'), $begintime->format('Y-m-d'));

    $endtime = tzbase_make_date($node->endtime);
    $this->assertEqual($now->format('Y-m-d'), $endtime->format('Y-m-d'));

    $this->assertEqual('09:15:00', $begintime->format('H:i:s'));
    $this->assertEqual('18:00:00', $endtime->format('H:i:s'));

    $this->assertEqual(3*3600+45*60, $node->breakduration);
    $this->assertEqual(5*3600, $node->totalduration, 'Expect 5 hours duration, got ' . $node->totalduration/3600);
    $this->assertEqual(3600+25*60, $node->travelduration, 'Expect ' . (3600+25*60) . ' seconds travelduration, got ' . $node->travelduration);
    $this->assertEqual(152, $node->travelkm);

    $this->assertEqual($edit['signature'], $node->signature);
    $this->assertEqual($edit['body'], $node->body);

    return $nid;
  }

  private function doTestPostMidnightReport($jobid) {
    $now = date_make_date('now');
    $edit['title'] = 'Midnight Report';
    $edit['workdate[month]'] = $now->format('n');
    $edit['workdate[day]'] = $now->format('j');
    $edit['workdate[year]'] = $now->format('Y');
    $edit['jobid'] = 'nid:0:' . $jobid;
    $edit['assignedto_name'] = $this->test_user->name;
    $edit['flags'] = 0;
    $edit['time[begintime]'] = '22:15';
    $edit['time[endtime]'] = '02:30';
    $edit['time[breakduration]'] = '01:15';
    $edit['travel[travelduration]'] = '';
    $edit['travel[travelkm]'] = '';
    $edit['signature'] = '';
    $edit['body'] = '';
    $nid = $this->addNode('tzreport', $edit);

    $node = node_load($nid);
    $begintime = tzbase_make_date($node->begintime);
    $this->assertEqual($now->format('Y-m-d'), $begintime->format('Y-m-d'));

    $endtime = tzbase_make_date($node->endtime);
    $now->modify('+1 day');
    $this->assertEqual($now->format('Y-m-d'), $endtime->format('Y-m-d'));

    $this->assertEqual('22:15:00', $begintime->format('H:i:s'));
    $this->assertEqual('02:30:00', $endtime->format('H:i:s'));

    $this->assertEqual(3600+15*60, $node->breakduration);
    $this->assertEqual(3*3600, $node->totalduration);
    $this->assertEqual(0, $node->travelduration);
    $this->assertEqual(0, $node->travelkm);

    return $nid;
  }

  private function doTestPostDSTSpringReport($jobid) {
    // Spring DST 2010 starts 02:00 2010-03-28
    $now = date_make_date('2010-03-27 12:00');
    $edit['title'] = 'DST Spring Report';
    $edit['workdate[month]'] = $now->format('n');
    $edit['workdate[day]'] = $now->format('j');
    $edit['workdate[year]'] = $now->format('Y');
    $edit['jobid'] = 'nid:0:' . $jobid;
    $edit['assignedto_name'] = $this->test_user->name;
    $edit['flags'] = 0;
    $edit['time[begintime]'] = '22:15';
    $edit['time[endtime]'] = '03:30';
    $edit['time[breakduration]'] = '01:15';
    $edit['travel[travelduration]'] = '';
    $edit['travel[travelkm]'] = '';
    $edit['signature'] = '';
    $edit['body'] = '';
    $nid = $this->addNode('tzreport', $edit);

    $node = node_load($nid);
    $begintime = tzbase_make_date($node->begintime);
    $this->assertEqual($now->format('Y-m-d'), $begintime->format('Y-m-d'));

    $endtime = tzbase_make_date($node->endtime);
    $now->modify('+1 day');
    $this->assertEqual($now->format('Y-m-d'), $endtime->format('Y-m-d'));

    $this->assertEqual('22:15:00', $begintime->format('H:i:s'));
    $this->assertEqual('03:30:00', $endtime->format('H:i:s'));

    $this->assertEqual(3600+15*60, $node->breakduration);
    $this->assertEqual(3*3600, $node->totalduration);
    $this->assertEqual(0, $node->travelduration);
    $this->assertEqual(0, $node->travelkm);

    return $nid;
  }

  private function doTestPostDSTAutumnReport($jobid) {
    // Autumn DST ends 03:00 2010-10-31
    $now = date_make_date('2010-10-30 12:00');
    $edit['title'] = 'DST Autumn Report';
    $edit['workdate[month]'] = $now->format('n');
    $edit['workdate[day]'] = $now->format('j');
    $edit['workdate[year]'] = $now->format('Y');
    $edit['jobid'] = 'nid:0:' . $jobid;
    $edit['assignedto_name'] = $this->test_user->name;
    $edit['flags'] = 0;
    $edit['time[begintime]'] = '22:15';
    $edit['time[endtime]'] = '03:30';
    $edit['time[breakduration]'] = '01:15';
    $edit['travel[travelduration]'] = '';
    $edit['travel[travelkm]'] = '';
    $edit['signature'] = '';
    $edit['body'] = '';
    $nid = $this->addNode('tzreport', $edit);

    $node = node_load($nid);
    $begintime = tzbase_make_date($node->begintime);
    $this->assertEqual($now->format('Y-m-d'), $begintime->format('Y-m-d'));

    $endtime = tzbase_make_date($node->endtime);
    $now->modify('+1 day');
    $this->assertEqual($now->format('Y-m-d'), $endtime->format('Y-m-d'));

    $this->assertEqual('22:15:00', $begintime->format('H:i:s'));
    $this->assertEqual('03:30:00', $endtime->format('H:i:s'));

    $this->assertEqual(3600+15*60, $node->breakduration);
    $this->assertEqual(5*3600, $node->totalduration);
    $this->assertEqual(0, $node->travelduration);
    $this->assertEqual(0, $node->travelkm);

    return $nid;
  }

  private function addNode($type, $form) {
    $this->drupalPost("node/add/$type", $form, t('Save'));
    $this->assertResponse(200);
    $this->assertText($form['title']);
    $this->assertText('has been created');

    $url = parse_url(curl_getinfo($this->curlHandle, CURLINFO_EFFECTIVE_URL));
    $match = array();
    $this->assertTrue(preg_match('/node\/(\d+)/', $url['path'], $match), 'Expected node id in URL');
    return $match[1];
  }

  /** Override assertEqual to get nice log prints by default */
  protected function assertEqual($first, $second, $message = '', $group = 'Other') {
    if(!$message) {
      $message = 'Expected "' . $first . '", got "' . $second . '"';
    }
    parent::assertEqual($first, $second, $message, $group);
  }
}