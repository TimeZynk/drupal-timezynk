<?php

define('TZUSER_OVERVIEW_RED_LIMIT', 14*24*3600);

function tzuser_menu() {
  $items['admin/user/tzuser/ajax/autocomplete/user'] = array(
    'page callback' => 'tzuser_ajax_autocomplete_user',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['tzuser'] = array(
    'title' => 'Employees',
    'access arguments' => array('view employees'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tzuser_user_overview'),
    'file' => 'includes/tzuser.overview.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['tzuser/overview'] = array(
    'title' => 'Employee overview',
    'access arguments' => array('view employees'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['tzuser/overview/ajax'] = array(
    'page callback' => 'tzuser_overview_ajax',
    'access arguments' => array('view employees'),
    'file' => 'includes/tzuser.overview.inc',
    'type' => MENU_CALLBACK,
  );
  $items['tzuser/add'] = array(
    'title' => 'Add employees',
    'access arguments' => array('manage employees'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tzuser_add_users_form'),
    'file' => 'includes/tzuser.add.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -9,
  );
  $items['tzuser/add/ajax'] = array(
    'page callback' => 'tzuser_add_ajax',
    'access arguments' => array('manage employees'),
    'file' => 'includes/tzuser.add.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function tzuser_perm() {
  return array('view employees', 'manage employees', 'bulk add employees');
}

/**
 * Implementation of hook_theme().
 * Declares the theme function for formatting the add user form rows.
 */
function tzuser_theme() {
  return array(
    'tzuser_add_users_rows' => array(
      'arguments' => array('element' => NULL),
      'file' => 'includes/tzuser.theme.inc',
    ),
    'tzuser_user_overview' => array(
      'arguments' => array('form' => NULL),
      'file' => 'includes/tzuser.theme.inc',
    ),
    'traffic_light' => array(
      'arguments' => array('status' => NULL),
      'file' => 'includes/tzuser.theme.inc',
    ),
    'time_ago' => array(
      'arguments' => array('time' => NULL),
      'file' => 'includes/tzuser.theme.inc',
    ),
    'due_reports_count' => array(
      'arguments' => array('count' => NULL),
      'file' => 'includes/tzuser.theme.inc',
    ),
  );
}

function tzuser_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'tzuser') . '/includes',
  );
}

function tzuser_user($op, &$edit, &$account, $category = NULL) {
  switch($op) {
    case 'delete':
      db_query('DELETE FROM {tzuser} WHERE uid = %d', $account->uid);
      break;

    case 'insert':
      _tzuser_save_entry($edit, $account);
      break;

    case 'load':
      $account->tzuser = _tzuser_load_entry($account);
      break;

    case 'update':
      _tzuser_save_entry($edit, $account);
      break;

    case 'view':
      _tzuser_show_entry($account);
      break;

    case 'validate':
      _tzuser_validate_entry($edit);
      break;

    case 'form':
    case 'register':
      return _tzuser_user_form($account);
  }
}

/**
 * Implements hook_theme_registry_alter()
 *
 * Swap in our own replacement for theme_username().
 **/
function tzuser_theme_registry_alter(&$theme_registry) {
  if (!empty($theme_registry['form_element'])) {
    $path = drupal_get_path('module', 'tzuser');
    $theme_registry['username']['function'] = 'tzuser_username';
    $theme_registry['username']['file'] = $path . '/includes/tzuser.theme.inc';
    $theme_registry['username']['theme path'] = $path;
    $theme_registry['username']['theme paths'][0] = $path;
  }
}

function tzuser_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_register' || $form_id == 'user_profile_form') {
    if (empty($form['account']['mail']['#default_value'])) {
      $form['account']['mail']['#default_value'] = _tzuser_generate_fake_email();
    }
    if (!user_access('administer site configuration')) {
      /* Hide e-mail field in the user registration and user edit forms,
       * since we don't really care about it and it is cumbersome to
       * have to enter it just to satisfy drupal.
       */
      $form['account']['mail']['#type'] = 'hidden';
      $form['account']['mail']['#value'] = $form['account']['mail']['#default_value'];
    }
  } else if ($form_id == 'user_login' || $form_id == 'user_login_block') {
    if (isset($form['#validate']) && is_array($form['#validate'])) {
      /* Allow users to login with mobile number instead of username */
      array_unshift($form['#validate'],'tzuser_user_login_validate');
    }
  }
}

/**
 * Allow the user to login using either their mobile
 * number or their username by checking if the enterered
 * username is found as a mobile number.
 */
function tzuser_user_login_validate($form, &$form_state) {
  if (empty($form_state['values']['name'])) {
    return;
  }

  $mobile = tzuser_validate_phone_number($form_state['values']['name']);
  if (empty($mobile)) {
    return;
  }

  $name = db_result(db_query("SELECT name FROM {users} u INNER JOIN {tzuser} tz ON u.uid = tz.uid WHERE tz.mobile = '%s' ORDER BY u.uid LIMIT 1", $mobile));
  if ($name) {
    form_set_value($form['name'], $name, $form_state);
  }
}


/**
 * AJAX callback for autocompleting user names. Groked from user.module.
 * This code is hard to read, but the requirements for autocomplete
 * functions are poorly documented so I'm not sure about how to
 * rewrite it.
 */
function tzuser_ajax_autocomplete_user($string = '') {
  // The user enters a comma-separated list of tags. We only autocomplete the last tag.
  $array = drupal_explode_tags($string);

  // Fetch last tag
  $last_string = trim(array_pop($array));
  $matches = array();
  if ($last_string != '') {
    $prefix = count($array) ? implode(', ', $array) . ', ' : '';

    if (strpos('anonymous', strtolower($last_string)) !== FALSE) {
      $matches[$prefix . 'Anonymous'] = 'Anonymous';
    }
    $result = db_query_range("SELECT fullname FROM {tzuser} WHERE LOWER(fullname) LIKE LOWER('%s%%')", $last_string, 0, 10);

    while ($account = db_fetch_object($result)) {
      $n = $account->fullname;
      // Commas and quotes in terms are special cases, so encode 'em.
      if (strpos($account->fullname, ',') !== FALSE || strpos($account->fullname, '"') !== FALSE) {
        $n = '"' . str_replace('"', '""', $account->fullname) . '"';
      }
      $matches[$prefix . $n] = check_plain($account->fullname);
    }
  }

  drupal_json($matches);
}

/**
 * Add a new user
 * @param string $fullname Users full name
 * @param string $mobile_number Users mobile number
 * @param string $username Users username
 * @param string $password Users
 * @param Array $extra_data Extra fields to save in the user object
 * @return object Fully loaded user object on success, otherwise FALSE
 */
function tzuser_add_user($fullname, $username, $password = '', $mobile_number = '', $extra_data = array(), $manager = 0) {
  if(empty($fullname) || empty($username)) {
    return FALSE;
  }

  // Try to load account
  $account = user_load(array('name' => $username));

  if(!is_array($extra_data)) {
    $extra_data = array();
  }
  $user_data = $extra_data;
  $user_data['status'] = 1;
  $user_data['tzuser'] = array(
    'fullname' => $fullname,
  );

  if(empty($password)) {
    /* Generate a password if none is provided. This can be changed by the admin
     * or when the user is authenticated remotely for the first time.
     */
    $password = user_password(10);
  }
  $user_data['pass'] = $password;

  $mobile_number = tzuser_validate_phone_number($mobile_number);
  if (!empty($mobile_number)) {
    $user_data['tzuser']['mobile'] = $mobile_number;
  }

  if (!empty($manager)) {
    $user_data['tzuser']['manager'] = $manager;
  }

  if (!$account) {
    $mail = _tzuser_generate_fake_email();
    $user_data['mail'] = $mail;
    $user_data['init'] = $mail;
    $user_data['name'] = $username;
  }

  drupal_alter('tzuser_add_user_data', $user_data);

  $account = user_save($account, $user_data);
  if (!$account) {
    return FALSE;
  }

  return $account;
}

function tzuser_update_user($username, $password, $fullname, $extra_data = array()) {
  if(empty($fullname) || empty($username) || empty($password)) {
    return FALSE;
  }

  // Try to load account
  $account = user_load(array('name' => $username, 'status' => 1));
  if (!$account) {
    return FALSE;
  }

  if(!is_array($extra_data)) {
    $extra_data = array();
  }

  $user_data = $extra_data;
  $user_data['tzuser'] = array(
      'fullname' => $fullname,
  );
  $user_data['pass'] = $password;

  $account = user_save($account, $user_data);
  if (!$account) {
    return FALSE;
  }

  return $account;
}

/**
 * Validate a mobile phone number and strip out all extra characters
 * @param string $number phone number to validate
 * @return all-numeric phone number if success, otherwise empty string
 */
function tzuser_validate_phone_number($number) {
  // Remove characters like '+', '-', ' ' and '/'
  $mobile_number = preg_replace('/\s*/', '', $number);
  $mobile_number = preg_replace('/[\+\-\/\(\)]/', '', $mobile_number);
  // There should be only digits left now
  if(!ctype_digit($mobile_number) || strlen($mobile_number) < 6) {
    return '';
  }
  return $mobile_number;
}

/**
 * @param array $account
 * @param int @now timestamp
 * @return TZUserStatus status
 */
function tzuser_get_user_status($account, $now) {
  tzbase_include_proto_classes();

  $status = new TZUserStatus($account->uid, $now, $account->login, TZUSER_OVERVIEW_RED_LIMIT);
  if($status->getStatusCode() <= TZUserStatus::RED) {
    return $status;
  }

  $result = db_query('SELECT COUNT(n.vid) AS count FROM {node} n INNER JOIN {tzreport} tzr ON tzr.vid = n.vid WHERE assignedto = %d AND flags < %d AND endtime < %d', $account->uid, TZFlags::REPORTED, $now);
  $data = db_fetch_object($result);
  if ($data) {
    $status->setNumberOfDueReports(intval($data->count));
  }

  drupal_alter('tzuser_status', $status);

  return $status;
}

function tzuser_list_users() {
  $users = array();
  $result = db_query('SELECT u.uid FROM {users} u INNER JOIN {tzuser} tz ON u.uid = tz.uid WHERE u.status = 1 ORDER BY tz.fullname');
  while($account = db_fetch_object($result)) {
    $users[] = user_load($account->uid);
  }
  return $users;
}


function _tzuser_load_entry($account) {
  $entry = array();

  $db_entry = db_fetch_array(db_query('SELECT * FROM {tzuser} WHERE uid = %d', $account->uid));
  if(is_array($db_entry)) {
    $entry = array_merge($entry, $db_entry);
    // unset uid since we don't need it in both $account->uid and $account->tzuser[uid]
    unset($entry['uid']);
  }

  return $entry;
}

function _tzuser_save_entry(&$edit, $account) {
  if (empty($edit['tzuser'])) {
    return;
  }

  $entry = array('uid' => $account->uid);
  if(!empty($account->tzuser)) {
    $entry = array_merge($entry, $account->tzuser);
  }
  $entry = array_merge($entry, $edit['tzuser']);

  if (!empty($entry['mobile'])) {
    $entry['mobile'] = tzuser_validate_phone_number($entry['mobile']);
  }

  if(empty($account->tzuser)) {
    drupal_write_record('tzuser', $entry);
  } else {
    drupal_write_record('tzuser', $entry, 'uid');
  }
  $edit['tzuser'] = NULL;
}

function _tzuser_show_entry(&$account) {
  if (!empty($account->tzuser['fullname'])) {
    $account->content['fullname'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Full name'),
      '#value' => $account->tzuser['fullname'],
      '#weight' => -10,
    );
  }
  if (!empty($account->tzuser['mobile'])) {
    $account->content['mobile'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Mobile number'),
      '#value' => $account->tzuser['mobile'],
      '#weight' => -9,
    );
  }
  if (!empty($account->tzuser['manager'])) {
    $manager = user_load($account->tzuser['manager']);
    $account->content['manager'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Manager'),
      '#value' => $manager->tzuser['fullname'],
      '#weight' => -8,
    );
  }
  $account->content['last_login'] = array(
    '#type' => 'user_profile_item',
    '#title' => t('Last login'),
    '#value' => format_date($account->login, 'small'),
    '#weight' => -7,
  );
}

function _tzuser_validate_entry($edit) {
  if(!isset($edit['tzuser'])) {
    return;
  }

  if (strlen($edit['tzuser']['mobile']) > 0) {
    $mobile = tzuser_validate_phone_number($edit['tzuser']['mobile']);
    if(empty($mobile)) {
      form_set_error('tzuser][mobile', t('Please enter a valid mobile number'));
    }
  }
}

function _tzuser_user_form($account) {
  if($account->uid == 1) {
    // Don't add anything to the admin user
    return array();
  }

  $form['tzuser'] = array(
    '#tree' => TRUE,
    '#type' => 'fieldset',
    '#title' => t('TimeZynk Information'),
    '#weight' => -20,
  );
  $form['tzuser']['fullname'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Full name'),
    '#description' => t('The users full name'),
    '#default_value' => empty($account->tzuser['fullname']) ? '' : $account->tzuser['fullname'],
  );
  $form['tzuser']['mobile'] = array(
    '#type' => 'textfield',
    '#required' => FALSE,
    '#title' => t('Mobile number'),
    '#description' => t('The users mobile number without country code'),
    '#default_value' => empty($account->tzuser['mobile']) ? '' : $account->tzuser['mobile'],
  );
  $form['tzuser']['manager'] = tzuser_select_manager_field(
    empty($account->tzuser['manager']) ? '' : $account->tzuser['manager']
  );
  $form['tzuser']['manager']['#title'] = t('Manager');
  $form['tzuser']['manager']['#description'] = t('Select employees manager');

  return $form;
}

function tzuser_select_manager_field($default_value = '') {
  $managers = array(
    0 => '---',
  );
  $result = db_query('SELECT * FROM {users_roles} role INNER JOIN {tzuser} tz ON role.uid = tz.uid WHERE rid = %d ORDER BY tz.fullname', tzuser_manager_role_id());
  while ($entry = db_fetch_object($result)) {
    $managers[intval($entry->uid)] = $entry->fullname;
  }

  $form_field = array(
    '#type' => 'select',
    '#required' => FALSE,
    '#default_value' => $default_value,
    '#options' => $managers,
  );
  return $form_field;
}

function tzuser_manager_role_id() {
  static $manager_role_id = 0;

  if (!$manager_role_id) {
    $manager_role_id = db_result(db_query('SELECT rid FROM {role} WHERE name = "manager"'));
  }

  return $manager_role_id;
}

function _tzuser_generate_fake_email() {
  return uniqid('user', TRUE) . '@' . $_SERVER['HTTP_HOST'];
}