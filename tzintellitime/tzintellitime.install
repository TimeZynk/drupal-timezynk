<?php

/**
 * Implementation of hook_install()
 */
function tzintellitime_install() {
  drupal_install_schema('tzintellitime');
}

/**
 * Implementation of hook_uninstall().
 */
function tzintellitime_uninstall() {
  // Remove tables.
  drupal_uninstall_schema('tzintellitime');

  // Remove variables
  variable_del('tzintellitime_base_url');
}

function tzintellitime_update_6000() {
  drupal_install_schema('tzintellitime');
}

/**
 * DB schema update 6001.
 * Adds intellitime_local_changes column to track if a node has local changes
 * that are not yet sent to intellitime.
 */
function tzintellitime_update_6001() {
  $ret = array();

  switch ($GLOBALS['db_type']) {
    case 'pgsql':
      db_add_column($ret, 'tzintellitime', 'vid', 'int', array('unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));
      db_add_column($ret, 'tzintellitime', 'intellitime_local_changes', 'int', array('unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));
      $ret[] = update_sql("ALTER TABLE {tzintellitime} DROP CONSTRAINT intellitime_id");
      $ret[] = update_sql("ALTER TABLE {tzintellitime} DROP PRIMARY KEY");
      $ret[] = update_sql("UPDATE {tzintellitime} tz INNER JOIN {node} n ON n.nid = tz.nid SET tz.vid = n.vid");
      $ret[] = update_sql("ALTER TABLE {tzintellitime} ADD PRIMARY KEY (vid)");
      break;

    case 'mysql': /* Intentional fall-through */
    case 'mysqli':
      $ret[] = update_sql("ALTER TABLE {tzintellitime} ADD COLUMN vid int UNSIGNED NOT NULL DEFAULT 0");
      $ret[] = update_sql("ALTER TABLE {tzintellitime} ADD COLUMN intellitime_local_changes int UNSIGNED NOT NULL DEFAULT 0");
      $ret[] = update_sql("ALTER TABLE {tzintellitime} DROP KEY intellitime_id");
      $ret[] = update_sql("ALTER TABLE {tzintellitime} DROP PRIMARY KEY");
      $ret[] = update_sql("UPDATE {tzintellitime} tz INNER JOIN {node} n ON n.nid = tz.nid SET tz.vid = n.vid");
      $ret[] = update_sql("ALTER TABLE {tzintellitime} ADD PRIMARY KEY (vid)");
      break;
  }

  return $ret;
}

function tzintellitime_update_6002() {
  $ret = array();
  db_add_field($ret, 'tzintellitime', 'intellitime_last_state',
    array(
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => NULL,
    )
  );
  return $ret;
}

function tzintellitime_update_6003() {
  $ret = array();
  db_add_index($ret, 'tzintellitime', 'intellitime_id', array('intellitime_id'));
  return $ret;
}

function tzintellitime_update_6004() {
  $ret = array();

  $schema['tzintellitime_session'] = array(
    'description' => 'Store user sessions',
    'fields' => array(
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'cookiejar' => array(
        'type' => 'blob'
      ),
      'last_effective_url' => array(
        'type' => 'varchar',
        'length' => 512,
        'not null' => TRUE,
      ),
      'created' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'changed' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('uid')
  );

  db_create_table($ret, 'tzintellitime_session', $schema['tzintellitime_session']);
  return $ret;
}

function tzintellitime_update_6005() {
  $ret = array();
  $result = db_query("SELECT uid, data FROM {users} WHERE uid > 1 AND status = 1");
  while ($account = db_fetch_object($result)) {
    $account = drupal_unpack($account);
    if (isset($account->intellitime_session_data)) {
      $session = $account->intellitime_session_data;
      $cookiejar = $session['cookiejar'];
      $cookies = file_get_contents($cookiejar);
      if ($cookies) {
        db_query(
          "INSERT INTO {tzintellitime_session} (uid, cookiejar, last_effective_url, created, changed) VALUES (%d, %b, '%s', %d, %d)",
          $account->uid,
          $cookies,
          $session['last_effective_url'],
          $session['created'],
          time()
        );
      }
    }
  }
  return $ret;
}

/**
 * Implementation of hook_schema()
 */
function tzintellitime_schema() {
  $schema['tzintellitime'] = array(
    'description' => t('Stores extra tzintellitime fields for tzjob and tzreport nodes'),
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('The {node}.nid'),
      ),
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('The {node_revision}.vid'),
      ),
      'intellitime_id' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => t('Node ID in intellitime'),
      ),
      'intellitime_local_changes' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('The node has local changes not yet transmitted to intellitime'),
      ),
      'intellitime_last_state' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => NULL,
        'description' => 'Latest successfully synchronized TZIntellitimeReport::STATE_* for this report row',
      ),
    ),
    'primary key' => array('vid'),
    'indexes' => array(
      'nid' => array('nid'),
      'intellitime_id' => array('intellitime_id'),
    ),
  );

  $schema['tzintellitime_session'] = array(
    'description' => 'Store user sessions',
    'fields' => array(
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'cookiejar' => array(
        'type' => 'blob'
      ),
      'last_effective_url' => array(
        'type' => 'varchar',
        'length' => 512,
        'not null' => TRUE,
      ),
      'created' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'changed' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('uid')
  );

  return $schema;
}

