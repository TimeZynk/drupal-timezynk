<?php

require_once dirname(__FILE__) . '/includes/TZIntellitimeAssignment.class.inc';
require_once dirname(__FILE__) . '/includes/TZIntellitimeBot.class.inc';
require_once dirname(__FILE__) . '/includes/TZIntellitimeParser.class.inc';
require_once dirname(__FILE__) . '/includes/TZIntellitimeReport.class.inc';
require_once dirname(__FILE__) . '/includes/TZIntellitimeWeek.class.inc';
require_once dirname(__FILE__) . '/includes/TZIntellitimeWeekData.class.inc';
tzbase_include_proto_classes();
/**
 * @file
 * TimeZynk intellitime integration tests.
 */

class TZIntellitimeTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'TZIntellitime test suite',
      'description' => '',
      'group' => 'TZIntellitime',
    );
  }

  /**
   * setUp() performs any pre-requisite tasks that need to happen.
   */
  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp('autoload', 'tzintellitime');
    autoload_registry_update();

    $this->account = $this->drupalCreateUser(array('access content'));
    $this->drupalLogin($this->account);
  }

  public function testIntellitimeAnnotation() {
    // Check that our nodes are successfully extended with intellitime information
    $id = uniqid('reportid');
    $node = $this->postReport($id);

    // Load from ID again
    $node = tzintellitime_node_load_by_intellitime_id($id);
    $this->assertEqual($id, $node->intellitime_id);
    // Local changes should be set to 1 by default.
    $this->assertEqual(1, $node->intellitime_local_changes);
  }

  public function testIntellitimeSyncedChange() {
    // Check that we can reset local changes to 0.
    $id = uniqid('reportid');
    $node = $this->postReport($id, array('intellitime_synchronized' => TRUE));

    $node = tzintellitime_node_load_by_intellitime_id($id);
    $this->assertEqual(0, $node->intellitime_local_changes);

    // Post again and check that local changes are set
    $node = $this->postReport($id, (array)$node);
    $node = tzintellitime_node_load_by_intellitime_id($id);
    $this->assertEqual(1, $node->intellitime_local_changes);

    // Set to synchronized and change a field
    $node->intellitime_synchronized = TRUE;
    $node->begintime = time();
    $node->endtime = time() + 3600;
    $node = $this->postReport($id, (array)$node);
    $node = tzintellitime_node_load_by_intellitime_id($id);
    // local changes should be reset, since we used the intellitime_synchronized field
    $this->assertEqual(0, $node->intellitime_local_changes);
    $this->assertFalse(isset($node->intellitime_synchronized));

    // Create new revision and make sure that local changes are set
    $old_vid = $node->vid;
    $node->revision = TRUE;
    $node = $this->postReport($id, (array)$node);
    $node = tzintellitime_node_load_by_intellitime_id($id);
    $this->assertEqual(1, $node->intellitime_local_changes);
    $this->assertNotEqual($old_vid, $node->vid);

    // Check that the old revision still has our previous value
    $node = node_load($node->nid, $old_vid, TRUE);
    $this->assertEqual(0, $node->intellitime_local_changes);
    $this->assertFalse(isset($node->intellitime_synchronized));
  }

  private function postReport($id, $extra_fields = array()) {
    $node = new stdClass();
    if(!empty($extra_fields)) {
      $node = (object)$extra_fields;
    }
    $node->type = 'tzreport';
    $node->title = 'test';
    $node->intellitime_id = $id;
    $node->name = $this->account->name;
    $node = node_submit($node);
    node_save($node);
    return $node;
  }

  /** Override assertEqual to get nice log prints by default */
  protected function assertEqual($first, $second, $message = '', $group = 'Other') {
    if(!$message) {
      $message = 'Expected "' . $first . '", got "' . $second . '"';
    }
    parent::assertEqual($first, $second, $message, $group);
  }
}

class TZIntellitimeBotTestCase extends DrupalWebTestCase {
  private $intelli_url = NULL;
  private $bot = NULL;
  private $curl = NULL;

  public static function getInfo() {
    return array(
      'name' => 'TZIntellitimeBot test suite',
      'description' => '',
      'group' => 'TZIntellitime',
    );
  }

  /**
   * setUp() performs any pre-requisite tasks that need to happen.
   */
  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp('libraries', 'date_api', 'autoload', 'tzbase', 'tzintellitime', 'tzintellitime_mock', 'tzintellitime_sync');
    autoload_registry_update();
    $admin = $this->drupalCreateUser(array('administer site configuration'));
    $this->drupalLogin($admin);
    $form = array(
     'users[0][login]' => 'test user',
     'users[0][fullname]' => 'Test von Tester',
     'users[0][password]' => 'test password',
    );
    $this->drupalPost('admin/settings/tzintellitime_mock', $form, t('Save'));

    $this->intelli_url = $this->getAbsoluteUrl('demo/v2005/Portal/Login.aspx');
    $this->curl = new TZCurl();
    $this->bot = new TZIntellitimeBot($this->curl, $this->intelli_url);
  }

  public function tearDown() {
    parent::tearDown();
    if(isset($this->bot)) {
      TZCurl::destroySessionData($this->curl->getSessionData());
      unset($this->bot);
      unset($this->curl);
    }
  }

  public function testLogin() {
    // Both username and password invalid
    try {
      $ok = $this->bot->login("monkey", "monkey");
      $this->fail('expected a TZAuthenticationFailureException');
    } catch (TZAuthenticationFailureException $e) {
      $this->pass('got a TZAuthenticationFailureException');
    }
    try {
      // Invalid password
      $ok = $this->bot->login("test user", "monkey");
    } catch (TZAuthenticationFailureException $e) {
      $this->pass('got a TZAuthenticationFailureException');
    }

    // Correct username and password
    $ok = $this->bot->login("test user", "test password");
    $this->assertEqual('Test von Tester', $ok);
  }

  public function testDestructorDoesNotRemoveCookiejar() {
     $ok = $this->bot->login("test user", "test password");
     $this->assertTrue($ok);
     $session_data = $this->curl->getSessionData();
     unset($this->bot);
     unset($this->curl);
     $this->assertTrue(TZCurl::isValidSessionData($session_data), "Expected valid session data.");
  }

  public function testResumeSession() {
    $ok = $this->bot->login("test user", "test password");
    $this->assertTrue($ok);
    $session_data = $this->curl->getSessionData();
    unset($this->bot);
    unset($this->curl);
    $this->curl = new TZCurl($session_data);
    $this->bot = new TZIntellitimeBot($this->curl, $this->intelli_url);
    $results = $this->bot->refreshWeek(NULL);
    $this->assertTrue($results instanceof TZIntellitimeWeekData);
    $this->assertNotNull($results, 'Expected $results NOT NULL.');
  }

  public function testCheckIfCookieFileIsEmpty() {
    $ok = $this->bot->login("test user", "test password");
    $this->assertTrue($ok);
    $session_data = $this->curl->getSessionData();
    unset($this->bot);
    unset($this->curl);
    unlink($session_data['cookiejar']);
    $session_data['cookiejar'] = tempnam(file_directory_temp(), 'testtzintellitimebot');
    try {
      $this->curl = new TZCurl($session_data);
      $this->fail('Should have generated an InvalidArgumentException');
    } catch (InvalidArgumentException $e) {
      $this->pass('Caught exception');
    }
  }

  public function testErrorCode() {
    variable_set('tzintellitime_mock_error_code', '500');
    try {
      $this->curl->request($this->getAbsoluteUrl('demo/v2005/Portal/Login.aspx'));
      $this->fail('Expected exception');
    } catch(TZNetworkFailureException $e) {
      $this->pass('Caught exception: ' . $e->getMessage());
    }
  }
}

class TZIntellitimeAdminPageTests extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'TZIntellitime Admin page test suite',
      'description' => '',
      'group' => 'TZIntellitime',
    );
  }

  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp('autoload', 'tzintellitime');
    autoload_registry_update();
    // Create and login user
    $admin_user = $this->drupalCreateUser(array('administer site configuration'));
    $this->drupalLogin($admin_user);
  }

  public function testSetHTTPSBaseUrl() {
    $edit = array();
    $edit['tzintellitime_base_url'] = 'https://my2.intelliplan.se/IntelliplanWeb/v2005/Portal/Login.aspx?Gw27UDttLdgps9TM4HqqoQ%3d%3d';
    $this->drupalPost('admin/settings/timezynk/tzintellitime', $edit, t('Save configuration'));
    $this->assertText(t('The configuration options have been saved.'));
    $this->assertEqual($edit['tzintellitime_base_url'], variable_get('tzintellitime_base_url', ''),
      'Expected ' . $edit['tzintellitime_base_url'] . ', got ' . variable_get('tzintellitime_base_url', ''));
  }

  public function testSetHTTPBaseUrl() {
    $edit = array();
    // We should not accept HTTP connections
    $edit['tzintellitime_base_url'] = 'http://my2.intelliplan.se/IntelliplanWeb/v2005/Portal/Login.aspx?Gw27UDttLdgps9TM4HqqoQ%3d%3d';
    $this->drupalPost('admin/settings/timezynk/tzintellitime', $edit, t('Save configuration'));
    $this->assertText(t('The configuration options have been saved.'));
    $this->assertEqual($edit['tzintellitime_base_url'], variable_get('tzintellitime_base_url', ''),
      'Expected ' . $edit['tzintellitime_base_url'] . ', got ' . variable_get('tzintellitime_base_url', ''));
  }

  public function testSetInvalidBaseUrl() {
    $edit = array();
    // We should not accept HTTP connections
    $edit['tzintellitime_base_url'] = 'monkey';
    $this->drupalPost('admin/settings/timezynk/tzintellitime', $edit, t('Save configuration'));
    $this->assertText(t('Invalid URL, please enter a correct intelliplan login URL.'));
    $this->assertNotEqual($edit['tzintellitime_base_url'], variable_get('tzintellitime_base_url', ''),
      'Did not expect ' . $edit['tzintellitime_base_url'] . ', got ' . variable_get('tzintellitime_base_url', ''));
  }

}


