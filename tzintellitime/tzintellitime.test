<?php

/**
 * @file
 * TimeZynk intellitime integration tests.
 */

class TZIntellitimeTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'TZIntellitime test suite',
      'description' => '',
      'group' => 'TZIntellitime',
    );
  }

  /**
   * setUp() performs any pre-requisite tasks that need to happen.
   */
  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp('tzintellitime');
    tzintellitime_include_classes();
    $this->account = $this->drupalCreateUser(array('access content'));
    $this->drupalLogin($this->account);
  }

  public function testIntellitimeAnnotation() {
    // Check that our nodes are successfully extended with intellitime information
    $id = uniqid('reportid');
    $node = $this->postReport($id);

    // Load from ID again
    $node = tzintellitime_node_load_by_intellitime_id($id);
    $this->assertEqual($id, $node->intellitime_id);
    // Local changes should be set to 1 by default.
    $this->assertEqual(1, $node->intellitime_local_changes);
  }

  public function testIntellitimeSyncedChange() {
    // Check that we can reset local changes to 0.
    $id = uniqid('reportid');
    $node = $this->postReport($id, array('intellitime_synchronized' => TRUE));

    $node = tzintellitime_node_load_by_intellitime_id($id);
    $this->assertEqual(0, $node->intellitime_local_changes);

    // Post again and check that local changes are set
    $node = $this->postReport($id, (array)$node);
    $node = tzintellitime_node_load_by_intellitime_id($id);
    $this->assertEqual(1, $node->intellitime_local_changes);

    // Set to synchronized and change a field
    $node->intellitime_synchronized = TRUE;
    $node->begintime = time();
    $node->endtime = time() + 3600;
    $node = $this->postReport($id, (array)$node);
    $node = tzintellitime_node_load_by_intellitime_id($id);
    // local changes should be reset, since we used the intellitime_synchronized field
    $this->assertEqual(0, $node->intellitime_local_changes);
    $this->assertFalse(isset($node->intellitime_synchronized));

    // Create new revision and make sure that local changes are set
    $old_vid = $node->vid;
    $node->revision = TRUE;
    $node = $this->postReport($id, (array)$node);
    $node = tzintellitime_node_load_by_intellitime_id($id);
    $this->assertEqual(1, $node->intellitime_local_changes);
    $this->assertNotEqual($old_vid, $node->vid);

    // Check that the old revision still has our previous value
    $node = node_load($node->nid, $old_vid, TRUE);
    $this->assertEqual(0, $node->intellitime_local_changes);
    $this->assertFalse(isset($node->intellitime_synchronized));
  }

  private function postReport($id, $extra_fields = array()) {
    $node = new stdClass();
    if(!empty($extra_fields)) {
      $node = (object)$extra_fields;
    }
    $node->type = 'tzreport';
    $node->title = 'test';
    $node->intellitime_id = $id;
    $node->name = $this->account->name;
    $node = node_submit($node);
    node_save($node);
    return $node;
  }

  /** Override assertEqual to get nice log prints by default */
  protected function assertEqual($first, $second, $message = '', $group = 'Other') {
    if(!$message) {
      $message = 'Expected "' . $first . '", got "' . $second . '"';
    }
    parent::assertEqual($first, $second, $message, $group);
  }
}

class TZIntellitimeBotTestCase extends DrupalWebTestCase {
  private $intelli_url = NULL;
  private $bot = NULL;

  public static function getInfo() {
    return array(
      'name' => 'TZIntellitimeBot test suite',
      'description' => '',
      'group' => 'TZIntellitime',
    );
  }

  /**
   * setUp() performs any pre-requisite tasks that need to happen.
   */
  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp('tzintellitime_mock','tzintellitime');
    require_once dirname(__FILE__) . '/tzintellitime.class.inc';
    $this->intelli_url = url('IntelliplanWeb/Login.aspx', array('absolute' => TRUE));
    $this->bot = new TZIntellitimeBot($this->intelli_url);
  }

  public function tearDown() {
    parent::tearDown();
    if(isset($this->bot)) {
      TZIntellitimeBot::destroy_session_data($this->bot->get_session_data());
      unset($this->bot);
    }
  }

  public function testInvalidLogin() {
    $ok = $this->bot->login("monkey", "monkey");
    $this->assertFalse($ok);
  }

  public function testValidUsernameInvalidPass() {
    $ok = $this->bot->login("test user", "monkey");
    $this->assertFalse($ok);
  }

  public function testValidLogin() {
    $ok = $this->bot->login("test user", "test password");
    $this->assertTrue($ok);
  }

  public function testDestructorDoesNotRemoveCookiejar() {
     $ok = $this->bot->login("test user", "test password");
     $this->assertTrue($ok);
     $session_data = $this->bot->get_session_data();
     unset($this->bot);
     $this->assertTrue(TZIntellitimeBot::is_valid_session_data($session_data), "Expected valid session data.");
  }

  public function testResumeSession() {
    $ok = $this->bot->login("test user", "test password");
    $this->assertTrue($ok);
    $session_data = $this->bot->get_session_data();
    unset($this->bot);
    $this->bot = new TZIntellitimeBot($this->intelli_url, $session_data);
    $results = $this->bot->load_week();
    $this->assertNotNull($results, 'Expected $results NOT NULL.');
    $this->assertNotNull($results['assignments'], 'Expected $results["assignments"] NOT NULL.');
    $this->assertNotNull($results['reports'], 'Expected $results["reports"] NOT NULL.');
  }

  public function testFetchingLocalUrl() {
    $this->assertTrue($this->bot->request(url('user', array('absolute' => TRUE))), "Should not be FALSE");
  }

  public function testFetchingInvalidUrl() {
    global $base_url;
    $this->assertFalse($this->bot->request(url('user', array('absolute' => TRUE)) . '/my_monkeys'), "Should be FALSE");
  }
  public function testCheckIfCookieFileIsEmpty() {
    $ok = $this->bot->login("test user", "test password");
    $this->assertTrue($ok);
    $session_data = $this->bot->get_session_data();
    unset($this->bot);
    unlink($session_data['cookiejar']);
    $session_data['cookiejar'] = tempnam(file_directory_temp(), 'testtzintellitimebot');
    try {
      $this->bot = new TZIntellitimeBot($this->intelli_url, $session_data);
      $this->fail('Should have generated an InvalidArgumentException');
    } catch (InvalidArgumentException $e) {
      $this->pass('Caught exception');
    }
  }
}


class TZIntellitimeParserTestCase extends DrupalUnitTestCase {
  private $login_view_state = "dDwyNDA3MjczMzc7dDw7bDxpPDA+Oz47bDx0PDtsPGk8MT47aTw1PjtpPDE1PjtpPDE5Pjs+O2w8dDw7bDxpPDA+Oz47bDx0PDtsPGk8MT47aTw3Pjs+O2w8dDxwPHA8bDxJbWFnZVVybDs+O2w8fi9DdXN0b21lcnMvaW50ZWxsaXBsYW5fbG9nby5naWY7Pj47Pjs7Pjt0PHA8cDxsPEltYWdlVXJsOz47bDx+L0ltYWdlcy9JbWdfSW50ZWxsaXBsYW5Mb2dvV2hpdGUuZ2lmOz4+Oz47Oz47Pj47Pj47dDxwPHA8bDxWaXNpYmxlOz47bDxvPGY+Oz4+Oz47Oz47dDxwPHA8bDxUZXh0Oz47bDxMb2dnYSBpbjs+Pjs+Ozs+O3Q8cDxwPGw8VGV4dDs+O2w8R2zDtm10IGzDtnNlbm9yZGV0Pzs+Pjs+Ozs+Oz4+Oz4+Oz5ngNWIe5WIW3O3prUuG7wbptC3jg==";

  public static function getInfo() {
    return array(
      'name' => 'TZIntellitimeParser test suite',
      'description' => '',
      'group' => 'TZIntellitime',
    );
  }

  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp('tzintellitime');
    require_once dirname(__FILE__) . '/tzintellitime.class.inc';
  }

  public function tearDown() {
    parent::tearDown();
  }

  private function loadHTMLFile($filename) {
    $full_name = dirname(__FILE__) . "/tests/$filename";
    $handle = fopen($full_name, "r");
    $contents = fread($handle, filesize($full_name));
    fclose($handle);
    return new TZIntellitimeParser($contents);
  }

  public function testBuildLoginPost() {
    $parser = $this->loadHTMLFile("intellitime-login-page.html");
    $post = $parser->build_login_post("monkeyname", "monkeypass");
    $this->assertEqual('Login.aspx?Gw27UDttLdgps9TM4HqqoQ%3d%3d', $post['action'], "correct action parsed");
    $this->assertEqual($this->login_view_state, $post['data']['__VIEWSTATE'], "Found viewstate");
    $this->assertEqual("monkeyname", $post['data']['TextBoxUserName'], "username correct");
    $this->assertEqual("monkeypass", $post['data']['TextBoxPassword'], "password correct");
    $this->assertEqual("Logga in", $post['data']['ButtonLogin'], "parsed submit button");
  }

  public function testLoginCheckerCatchesFailedLogin() {
    $parser = $this->loadHTMLFile('intellitime-login-page.html');
    $this->assertFalse($parser->is_valid_login(), "detected failed login");
  }

  public function testLoginCheckerCatchesSuccessfulLogin() {
    $parser = $this->loadHTMLFile('intellitime-main-page.html');
    $this->assertTrue($parser->is_valid_login(), "detected successful login");
  }

  public function testBuildInputWithComments() {
    $parser = $this->loadHTMLFile('intellitime-timereport-with-comments.html');
    $reports = $parser->parse_reports();
    $tzreport = $reports[0];

    $tzreport->id = 'mhbLP96iqH3xps0bh7%2fZv84hbku5Eii3';
    $tzreport->begin = '09:31';
    $tzreport->end = '17:43';
    $tzreport->comment = 'I did all I could!';

    $result = $parser->build_inputs($tzreport);
    $this->assertNotNull($result, "expect not NULL");
    $this->assertEqual($tzreport->comment, $result['OldRowsRepeater:_ctl0:TextboxNote']);
    $this->assertEqual($tzreport->begin, $result['OldRowsRepeater:_ctl0:TextboxTimeFrom']);
    $this->assertEqual($tzreport->end, $result['OldRowsRepeater:_ctl0:TextboxTimeTo']);
    $this->assertEqual($tzreport->break_duration_minutes, $result['OldRowsRepeater:_ctl0:TextboxBreak']);



  }

  public function testBuildInputWithoutComments() {
    $parser = $this->loadHTMLFile('intellitime-timereport-page.html');
    $reports = $parser->parse_reports();
    $tzreport = $reports[4];

    $tzreport->id = 'mhbLP96iqH2aeWvSjjSDX84hbku5Eii3';
    $tzreport->begin = '09:31';
    $tzreport->end = '17:43';
    $tzreport->comment = 'I did all I could!';

    $result = $parser->build_inputs($tzreport);
    $this->assertNotNull($result, "expect not NULL");
    $this->assertTrue(!isset($result['OldRowsRepeater:_ctl4:TextboxNote']));
    $this->assertEqual($tzreport->begin, $result['OldRowsRepeater:_ctl4:TextboxTimeFrom']);
    $this->assertEqual($tzreport->end, $result['OldRowsRepeater:_ctl4:TextboxTimeTo']);
    $this->assertEqual($tzreport->break_duration_minutes, $result['OldRowsRepeater:_ctl4:TextboxBreak']);
  }

  public function testParseAssignments() {
    $parser = $this->loadHTMLFile('intellitime-timereport-page.html');
    $assignments = $parser->parse_assignments();
    $this->assertEqual(1, count($assignments), "only one assignment");
    $this->assertEqual("5983", $assignments[0]->id, "assignment code 5983");
  }

  public function testParseAssignmentsUTF8Encoding() {
    $parser = $this->loadHTMLFile('intellitime-timereport-page.html');
    $assignments = $parser->parse_assignments();
    $this->assertEqual("Testföretaget Effekt, Lagerarbetare", $assignments[0]->title, "expect UTF-8 encoding");
  }

  public function testParseAbsenceTypes() {
    $parser = $this->loadHTMLFile('intellitime-timereport-page.html');
    $absence_types = $parser->parse_absence_types();
    $this->assertEqual(28, count($absence_types));
    $this->assertEqual("_AC_Uttag extra fridag", $absence_types[4]->id);
  }

  public function testParseReportsCorrectCount() {
    $parser = $this->loadHTMLFile('intellitime-timereport-page.html');
    $reports = $parser->parse_reports();
    $this->assertEqual(7, count($reports), "expect seven reports");
  }

  public function testParseReportsOnlyUniqueIDs() {
    $parser = $this->loadHTMLFile('intellitime-timereport-page.html');
    $reports = $parser->parse_reports();
    foreach($reports as $report) {
      $id[$report->id] = TRUE;
    }
    $this->assertEqual(count($reports), count($id), "all IDs unique");
  }

  public function testParseReportsUTF8Encoding() {
    $parser = $this->loadHTMLFile('intellitime-timereport-page.html');
    $reports = $parser->parse_reports();
    $this->assertEqual("Testföretaget Effekt, Lagerarbetare", $reports[3]->title, "expect UTF-8 encoding");
  }

  public function testFindRowById() {
    $parser = $this->loadHTMLFile('intellitime-timereport-page.html');
    $row = $parser->find_row_by_id('mhbLP96iqH1DQyNUuxAbvM4hbku5Eii3');
    $this->assertEqual('OldRowsRepeater__ctl5_td1', (string) $row->td[0]['id'], "expect OldRowsRepeater__ctl5_td1");
  }
  public function testFindRowByIdShouldNotFindThis() {
    $parser = $this->loadHTMLFile('intellitime-timereport-page.html');
    $row = $parser->find_row_by_id('Expense.aspx?');
    $this->assertFalse($row, "expect FALSE caused by illegal ID.");
  }

  public function testBuildSelects() {
    $parser = $this->loadHTMLFile('intellitime-timereport-page.html');
    $selects = $parser->build_selects();
    $expected_array["CustOrdersDropDown"] = 0;
    $this->assertEqual($expected_array, $selects, "Expect CustOrdersDropDown = 0");
  }

  public function testReadComments() {
    $parser = $this->loadHTMLFile('intellitime-timereport-with-comments.html');
    $reports = $parser->parse_reports();
    $this->assertEqual('asda', $reports[0]->comment);
    $this->assertEqual('', $reports[1]->comment);
    $this->assertEqual('Panda panda panda "test mjauu" hej!*\'112\'', $reports[2]->comment);
  }

  /** Override assertEqual to get nice log prints by default */
  protected function assertEqual($first, $second, $message = '', $group = 'Other') {
    if(!$message) {
      $message = 'Expected "' . $first . '", got "' . $second . '"';
    }
    parent::assertEqual($first, $second, $message, $group);
  }
}

class TZIntellitimeReportTestCase extends DrupalWebTestCase {

  private $report = NULL;

  public static function getInfo() {
    return array(
      'name' => 'TZIntellitimeReport test suite',
      'description' => '',
      'group' => 'TZIntellitime',
    );
  }

  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp('date_api', 'date_timezone', 'tzbase', 'tzintellitime');
    variable_set('date_default_timezone_name', 'Europe/Stockholm');
    tzintellitime_include_classes();

    $this->report = new TZIntellitimeReport();
  }

  public function tearDown() {
    parent::tearDown();
    $this->report = NULL;
  }

  public function testSetYearForReportWithNoMonth() {
    $years[0] = 2009;
    $this->assertFalse($this->report->set_year($years), "expected FALSE from ::set_year");
    $this->assertNull($this->report->year, 'Expected $report->year to be NULL');
  }

  public function testSetYearForReportWithMonthNotDecOrJan() {
    $this->report->month=11;
    $years[0] = 2009;
    $years[1] = 2010;
    $this->assertFalse($this->report->set_year($years), "expected FALSE from ::set_year");
    $this->assertNull($this->report->year, 'Expected $report->year to be NULL');
  }

  public function testSetYearWithTooFewYears() {
    $this->report->month = 1;
    $years = array();
    $this->assertFalse($this->report->set_year($years), 'Expected FALSE from::set_year called with empty $years');
    $this->assertNull($this->report->year, 'Expected $report->year to be NULL');
  }

  public function testSetYearWithTooManyYears() {
    $this->report->month = 1;
    $years[] = 2009;
    $years[] = 2010;
    $years[] = 2011;
    $this->assertFalse($this->report->set_year($years), 'Expected FALSE from::set_year called with too large $years');
    $this->assertNull($this->report->year, 'Expected $report->year to be NULL');
  }

  public function testSetYear() {
    $this->report->month = 1;
    $years[] = 2009;
    $this->assertTrue($this->report->set_year($years), 'Expected true');
    $this->assertEqual($years[0], $this->report->year, 'Expected year to be 2009, it was ' . $this->report->year);
  }

  public function testSetYearForFirstMonth() {
    $this->report->month = 1;
    $years[] = 2009;
    $years[] = 2010;
    $this->assertTrue($this->report->set_year($years), 'Expected true');
    $this->assertEqual($years[1], $this->report->year, 'Expected year to be 2010, it was ' . $this->report->year);
  }

  public function testSetYearForLastMonth() {
    $this->report->month = 12;
    $years[] = 2009;
    $years[] = 2010;
    $this->assertTrue($this->report->set_year($years), 'Expected true');
    $this->assertEqual($years[0], $this->report->year, 'Expected year to be 2009, it was ' . $this->report->year);
  }

  public function testComparisonIdentical() {
    $other_report = new TZIntellitimeReport();
    _tzintellitime_populate_report($this->report);
    _tzintellitime_populate_report($other_report);

    $this->assertEqual($this->report, $other_report, 'Expected the two reports to be considered equal.');
  }

  public function testComparisonDifferent() {
    $other_report = new TZIntellitimeReport();
    _tzintellitime_populate_report($this->report);
    _tzintellitime_populate_report($other_report);
    $other_report->overtime_hours = 6;

    $this->assertNotEqual($this->report, $other_report, 'Expected the two reports to not be considered equal.');
  }

  public function testConvertToTZReport() {
    _tzintellitime_populate_report($this->report);
    $mockaccount = (object)array('uid' => '1234', 'name' => 'Mock User');
    $tzreport = $this->report->convert_to_tzreport($mockaccount);
    $this->assertNotNull($tzreport, 'Expected $tzreport not NULL.');
    $this->assertEqual($this->report->title, $tzreport->title, "Expected equal titles");
    $this->assertEqual($this->report->comment, $tzreport->body, "Expected equal comments");
    $this->assertEqual(1284530400, $tzreport->begintime, 'Expected 1284530400 as begintime, got ' . $tzreport->begintime);
    $this->assertEqual(1284566400, $tzreport->endtime, 'Expected 1284566400 as endtime, got ' . $tzreport->endtime);
    $this->assertEqual($this->report->break_duration_minutes*60, $tzreport->breakduration, "Expected break durations to match");
  }

  public function testUpdateTZReport() {
    _tzintellitime_populate_report($this->report);
    $mockaccount = (object)array('uid' => '1234', 'name' => 'Mock User');
    $tzreport = $this->report->convert_to_tzreport($mockaccount);
    $tzreport->nid = 12345;
    $this->report->break_duration_minutes = 35;
    $tzreport = $this->report->convert_to_tzreport($mockaccount, $tzreport);
    $this->assertNotNull($tzreport, 'Expected $tzreport not NULL.');
    $this->assertEqual(12345, $tzreport->nid);
    $this->assertEqual($this->report->title, $tzreport->title, "Expected equal titles");
    $this->assertEqual(1284530400, $tzreport->begintime, 'Expected 1284530400 as begintime, got ' . $tzreport->begintime);
    $this->assertEqual(1284566400, $tzreport->endtime, 'Expected 1284566400 as endtime, got ' . $tzreport->endtime);
    $this->assertEqual($this->report->break_duration_minutes*60, $tzreport->breakduration, "Expected break durations to match");
  }

  /** Override assertEqual to get nice log prints by default */
  protected function assertEqual($first, $second, $message = '', $group = 'Other') {
    if(!$message) {
      $message = 'Expected "' . $first . '", got "' . $second . '"';
    }
    parent::assertEqual($first, $second, $message, $group);
  }
}

class TZIntellitimeAdminPageTests extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'TZIntellitime Admin page test suite',
      'description' => '',
      'group' => 'TZIntellitime',
    );
  }

  public function setUp() {
    // Enable any modules required for the test.
   parent::setUp('tzintellitime');
   // Create and login user
   $admin_user = $this->drupalCreateUser(array('administer site configuration'));
   $this->drupalLogin($admin_user);
  }

  public function testSetHTTPSBaseUrl() {
    $edit = array();
    $edit['tzintellitime_base_url'] = 'https://my2.intelliplan.se/IntelliplanWeb/v2005/Portal/Login.aspx?Gw27UDttLdgps9TM4HqqoQ%3d%3d';
    $this->drupalPost('admin/settings/timezynk/tzintellitime', $edit, t('Save configuration'));
    $this->assertText(t('The configuration options have been saved.'));
    $this->assertEqual($edit['tzintellitime_base_url'], variable_get('tzintellitime_base_url', ''),
      'Expected ' . $edit['tzintellitime_base_url'] . ', got ' . variable_get('tzintellitime_base_url', ''));
  }

  public function testSetHTTPBaseUrl() {
    $edit = array();
    // We should not accept HTTP connections
    $edit['tzintellitime_base_url'] = 'http://my2.intelliplan.se/IntelliplanWeb/v2005/Portal/Login.aspx?Gw27UDttLdgps9TM4HqqoQ%3d%3d';
    $this->drupalPost('admin/settings/timezynk/tzintellitime', $edit, t('Save configuration'));
    $this->assertText(t('The configuration options have been saved.'));
    $this->assertEqual($edit['tzintellitime_base_url'], variable_get('tzintellitime_base_url', ''),
      'Expected ' . $edit['tzintellitime_base_url'] . ', got ' . variable_get('tzintellitime_base_url', ''));
  }

  public function testSetInvalidBaseUrl() {
    $edit = array();
    // We should not accept HTTP connections
    $edit['tzintellitime_base_url'] = 'monkey';
    $this->drupalPost('admin/settings/timezynk/tzintellitime', $edit, t('Save configuration'));
    $this->assertText(t('Invalid URL, please enter a correct intelliplan login URL.'));
    $this->assertNotEqual($edit['tzintellitime_base_url'], variable_get('tzintellitime_base_url', ''),
      'Did not expect ' . $edit['tzintellitime_base_url'] . ', got ' . variable_get('tzintellitime_base_url', ''));
  }

}

function _tzintellitime_populate_report(&$report) {
    $report->id = 'mhbLP96iqH2Zr7CDtWyWb84hbku5Eii3';
    $report->done = FALSE;
    $report->year = 2010;
    $report->month = 9;
    $report->day = 15;
    $report->title = "En dag i livet för en apa.";
    $report->begin = "08:00";
    $report->end = "18:00";
    $report->break_duration_minutes = 24;
    $report->overtime_hours = 4;
    $report->comment = 'TimeZynk';
}