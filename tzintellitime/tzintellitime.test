<?php

/**
 * @file
 * TimeZynk intellitime integration tests.
 */

class TZIntellitimeBotTestCase extends DrupalWebTestCase {
  private $intelli_url = "http://my2.intelliplan.se/IntelliplanWeb/v2005/Portal/Login.aspx?Gw27UDttLdgps9TM4HqqoQ%3d%3d";
  private $login_view_state = "dDwyNDA3MjczMzc7dDw7bDxpPDA+Oz47bDx0PDtsPGk8MT47aTw1PjtpPDE1PjtpPDE5Pjs+O2w8dDw7bDxpPDA+Oz47bDx0PDtsPGk8MT47aTw3Pjs+O2w8dDxwPHA8bDxJbWFnZVVybDs+O2w8fi9DdXN0b21lcnMvaW50ZWxsaXBsYW5fbG9nby5naWY7Pj47Pjs7Pjt0PHA8cDxsPEltYWdlVXJsOz47bDx+L0ltYWdlcy9JbWdfSW50ZWxsaXBsYW5Mb2dvV2hpdGUuZ2lmOz4+Oz47Oz47Pj47Pj47dDxwPHA8bDxWaXNpYmxlOz47bDxvPGY+Oz4+Oz47Oz47dDxwPHA8bDxUZXh0Oz47bDxMb2dnYSBpbjs+Pjs+Ozs+O3Q8cDxwPGw8VGV4dDs+O2w8R2zDtm10IGzDtnNlbm9yZGV0Pzs+Pjs+Ozs+Oz4+Oz4+Oz5ngNWIe5WIW3O3prUuG7wbptC3jg==";

  public static function getInfo() {
    return array(
      'name' => 'TZIntellitimeBot test suite',
      'description' => '',
      'group' => 'TimeZynk',
    );
  }

  /**
   * setUp() performs any pre-requisite tasks that need to happen.
   */
  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp('tzintellitime');
    $this->bot = new TZIntellitimeBot($this->intelli_url);
  }

  public function tearDown() {
    parent::tearDown();
    $this->bot = NULL;
  }

  private function url($path = '') {
    $url = "http://localhost/user" . $path;
    return $url;
  }

  public function testInvalidLogin() {
    $ok = $this->bot->login("monkey", "monkey");
    $this->assertFalse($ok);
  }

  public function testValidUsernameInvalidPass() {
    $ok = $this->bot->login("Johan Heander", "monkey");
    $this->assertFalse($ok);
  }

  public function testValidLogin() {
    $ok = $this->bot->login("Johan Heander", "0733623516");
    $this->assertTrue($ok);
  }

  public function testFetchingLocalUrl() {
    $this->assertTrue($this->bot->request($this->url()), "Should not be FALSE");
  }

  public function testFetchingInvalidUrl() {
    $this->assertFalse($this->bot->request($this->url("/my_monkeys")), "Should be FALSE");
  }
}

class TZIntellitimeParserTestCase extends DrupalUnitTestCase {
  private $intelli_url = "http://my2.intelliplan.se/IntelliplanWeb/v2005/Portal/Login.aspx?Gw27UDttLdgps9TM4HqqoQ%3d%3d";
  private $login_view_state = "dDwyNDA3MjczMzc7dDw7bDxpPDA+Oz47bDx0PDtsPGk8MT47aTw1PjtpPDE1PjtpPDE5Pjs+O2w8dDw7bDxpPDA+Oz47bDx0PDtsPGk8MT47aTw3Pjs+O2w8dDxwPHA8bDxJbWFnZVVybDs+O2w8fi9DdXN0b21lcnMvaW50ZWxsaXBsYW5fbG9nby5naWY7Pj47Pjs7Pjt0PHA8cDxsPEltYWdlVXJsOz47bDx+L0ltYWdlcy9JbWdfSW50ZWxsaXBsYW5Mb2dvV2hpdGUuZ2lmOz4+Oz47Oz47Pj47Pj47dDxwPHA8bDxWaXNpYmxlOz47bDxvPGY+Oz4+Oz47Oz47dDxwPHA8bDxUZXh0Oz47bDxMb2dnYSBpbjs+Pjs+Ozs+O3Q8cDxwPGw8VGV4dDs+O2w8R2zDtm10IGzDtnNlbm9yZGV0Pzs+Pjs+Ozs+Oz4+Oz4+Oz5ngNWIe5WIW3O3prUuG7wbptC3jg==";

  public static function getInfo() {
    return array(
      'name' => 'TZIntellitimeParser test suite',
      'description' => '',
      'group' => 'TimeZynk',
    );
  }

  private function loadHTMLFile($filename) {
    $full_name = dirname(__FILE__) . "/test/$filename";
    $handle = fopen($full_name, "r");
    $contents = fread($handle, filesize($full_name));
    fclose($handle);
    return new TZIntellitimeParser($contents);
  }

  public function testBuildLoginPost() {
    $parser = $this->loadHTMLFile("intellitime-login-page.html");
    $post = $parser->build_login_post("monkeyname", "monkeypass");
    $this->assertEqual('Login.aspx?Gw27UDttLdgps9TM4HqqoQ%3d%3d', $post['action'], "correct action parsed");
    $this->assertEqual($this->login_view_state, $post['data']['__VIEWSTATE'], "Found viewstate");
    $this->assertEqual("monkeyname", $post['data']['TextBoxUserName'], "username correct");
    $this->assertEqual("monkeypass", $post['data']['TextBoxPassword'], "password correct");
    $this->assertEqual("Logga in", $post['data']['ButtonLogin'], "parsed submit button");
  }

  public function testLoginCheckerCatchesFailedLogin() {
    $parser = $this->loadHTMLFile('intellitime-login-page.html');
    $this->assertFalse($parser->is_valid_login(), "detected failed login");
  }

  public function testLoginCheckerCatchesSuccessfulLogin() {
    $parser = $this->loadHTMLFile('intellitime-main-page.html');
    $this->assertTrue($parser->is_valid_login(), "detected successful login");
  }

  public function testParseAssignments() {
    $parser = $this->loadHTMLFile('intellitime-timereport-page.html');
    $assignments = $parser->parse_assignments();
    $this->assertEqual(1, count($assignments), "only one assignment");
    $this->assertEqual("5983", key($assignments), "assignment code 5983");
  }

  public function testParseAssignmentsUTF8Encoding() {
    $parser = $this->loadHTMLFile('intellitime-timereport-page.html');
    $assignments = $parser->parse_assignments();
    $this->assertEqual("Testföretaget Effekt, Lagerarbetare", current($assignments), "expect UTF-8 encoding");
  }


  public function testParseReportsCorrectCount() {
    $parser = $this->loadHTMLFile('intellitime-timereport-page.html');
    $reports = $parser->parse_reports();
    $this->assertEqual(7, count($reports), "expect seven reports");
  }

  public function testParseReportsOnlyUniqueIDs() {
    $parser = $this->loadHTMLFile('intellitime-timereport-page.html');
    $reports = $parser->parse_reports();
    foreach($reports as $report) {
      $id[$report['id']] = TRUE;
    }
    $this->assertEqual(count($reports), count($id), "all IDs unique");
  }

  public function testParseReportsUTF8Encoding() {
    $parser = $this->loadHTMLFile('intellitime-timereport-page.html');
    $reports = $parser->parse_reports();
    $this->assertEqual("Testföretaget Effekt, Lagerarbetare", $reports[3]['title'], "expect UTF-8 encoding");
  }
}