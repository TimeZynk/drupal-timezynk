<?php

/**
 * @file
 * TimeZynk intellitime integration tests.
 */

class TZIntellitimeBotTestCase extends DrupalWebTestCase {
  private $intelli_url = "http://my2.intelliplan.se/IntelliplanWeb/v2005/Portal/Login.aspx?Gw27UDttLdgps9TM4HqqoQ%3d%3d";
  private $login_view_state = "dDwyNDA3MjczMzc7dDw7bDxpPDA+Oz47bDx0PDtsPGk8MT47aTw1PjtpPDE1PjtpPDE5Pjs+O2w8dDw7bDxpPDA+Oz47bDx0PDtsPGk8MT47aTw3Pjs+O2w8dDxwPHA8bDxJbWFnZVVybDs+O2w8fi9DdXN0b21lcnMvaW50ZWxsaXBsYW5fbG9nby5naWY7Pj47Pjs7Pjt0PHA8cDxsPEltYWdlVXJsOz47bDx+L0ltYWdlcy9JbWdfSW50ZWxsaXBsYW5Mb2dvV2hpdGUuZ2lmOz4+Oz47Oz47Pj47Pj47dDxwPHA8bDxWaXNpYmxlOz47bDxvPGY+Oz4+Oz47Oz47dDxwPHA8bDxUZXh0Oz47bDxMb2dnYSBpbjs+Pjs+Ozs+O3Q8cDxwPGw8VGV4dDs+O2w8R2zDtm10IGzDtnNlbm9yZGV0Pzs+Pjs+Ozs+Oz4+Oz4+Oz5ngNWIe5WIW3O3prUuG7wbptC3jg==";
  private $cookiejar;

  public static function getInfo() {
    return array(
      'name' => 'TZIntellitimeBot test suite',
      'description' => '',
      'group' => 'TimeZynk',
    );
  }

  /**
   * setUp() performs any pre-requisite tasks that need to happen.
   */
  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp('tzintellitime');
    require_once dirname(__FILE__) . '/tzintellitime.class.inc';
    $this->cookiejar = tempnam(file_directory_temp(), 'tzintellitime');
    $this->bot = new TZIntellitimeBot($this->intelli_url, $this->cookiejar);
  }

  public function tearDown() {
    parent::tearDown();
    unset($this->bot);
    unlink($this->cookiejar);
  }

  public function testInvalidLogin() {
    $ok = $this->bot->login("monkey", "monkey");
    $this->assertFalse($ok);
  }

  public function testValidUsernameInvalidPass() {
    $ok = $this->bot->login("Johan Heander", "monkey");
    $this->assertFalse($ok);
  }

  public function testValidLogin() {
    $ok = $this->bot->login("Johan Heander", "0733623516");
    $this->assertTrue($ok);
  }

  public function testDestructorDoesNotRemoveCookiejar() {
     $ok = $this->bot->login("Johan Heander", "0733623516");
     $this->assertTrue($ok);
     unset($this->bot);
     $this->assertTrue(file_exists($this->cookiejar), "Expected cookiejar file to still exist after destruction of bot.");
  }

  public function testFetchingLocalUrl() {
    $this->assertTrue($this->bot->request(url('user', array('absolute' => TRUE))), "Should not be FALSE");
  }

  public function testFetchingInvalidUrl() {
    global $base_url;
    $this->assertFalse($this->bot->request(url('user', array('absolute' => TRUE)) . '/my_monkeys'), "Should be FALSE");
  }
}


class TZIntellitimeParserTestCase extends DrupalUnitTestCase {
  private $intelli_url = "http://my2.intelliplan.se/IntelliplanWeb/v2005/Portal/Login.aspx?Gw27UDttLdgps9TM4HqqoQ%3d%3d";
  private $login_view_state = "dDwyNDA3MjczMzc7dDw7bDxpPDA+Oz47bDx0PDtsPGk8MT47aTw1PjtpPDE1PjtpPDE5Pjs+O2w8dDw7bDxpPDA+Oz47bDx0PDtsPGk8MT47aTw3Pjs+O2w8dDxwPHA8bDxJbWFnZVVybDs+O2w8fi9DdXN0b21lcnMvaW50ZWxsaXBsYW5fbG9nby5naWY7Pj47Pjs7Pjt0PHA8cDxsPEltYWdlVXJsOz47bDx+L0ltYWdlcy9JbWdfSW50ZWxsaXBsYW5Mb2dvV2hpdGUuZ2lmOz4+Oz47Oz47Pj47Pj47dDxwPHA8bDxWaXNpYmxlOz47bDxvPGY+Oz4+Oz47Oz47dDxwPHA8bDxUZXh0Oz47bDxMb2dnYSBpbjs+Pjs+Ozs+O3Q8cDxwPGw8VGV4dDs+O2w8R2zDtm10IGzDtnNlbm9yZGV0Pzs+Pjs+Ozs+Oz4+Oz4+Oz5ngNWIe5WIW3O3prUuG7wbptC3jg==";

  public static function getInfo() {
    return array(
      'name' => 'TZIntellitimeParser test suite',
      'description' => '',
      'group' => 'TimeZynk',
    );
  }

  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp('tzintellitime');
    require_once dirname(__FILE__) . '/tzintellitime.class.inc';
  }

  public function tearDown() {
    parent::tearDown();
  }

  private function loadHTMLFile($filename) {
    $full_name = dirname(__FILE__) . "/test/$filename";
    $handle = fopen($full_name, "r");
    $contents = fread($handle, filesize($full_name));
    fclose($handle);
    return new TZIntellitimeParser($contents);
  }

  public function testBuildLoginPost() {
    $parser = $this->loadHTMLFile("intellitime-login-page.html");
    $post = $parser->build_login_post("monkeyname", "monkeypass");
    $this->assertEqual('Login.aspx?Gw27UDttLdgps9TM4HqqoQ%3d%3d', $post['action'], "correct action parsed");
    $this->assertEqual($this->login_view_state, $post['data']['__VIEWSTATE'], "Found viewstate");
    $this->assertEqual("monkeyname", $post['data']['TextBoxUserName'], "username correct");
    $this->assertEqual("monkeypass", $post['data']['TextBoxPassword'], "password correct");
    $this->assertEqual("Logga in", $post['data']['ButtonLogin'], "parsed submit button");
  }

  public function testLoginCheckerCatchesFailedLogin() {
    $parser = $this->loadHTMLFile('intellitime-login-page.html');
    $this->assertFalse($parser->is_valid_login(), "detected failed login");
  }

  public function testLoginCheckerCatchesSuccessfulLogin() {
    $parser = $this->loadHTMLFile('intellitime-main-page.html');
    $this->assertTrue($parser->is_valid_login(), "detected successful login");
  }

  public function testParseAssignments() {
    $parser = $this->loadHTMLFile('intellitime-timereport-page.html');
    $assignments = $parser->parse_assignments();
    $this->assertEqual(1, count($assignments), "only one assignment");
    $this->assertEqual("5983", key($assignments), "assignment code 5983");
  }

  public function testParseAssignmentsUTF8Encoding() {
    $parser = $this->loadHTMLFile('intellitime-timereport-page.html');
    $assignments = $parser->parse_assignments();
    $this->assertEqual("Testföretaget Effekt, Lagerarbetare", current($assignments), "expect UTF-8 encoding");
  }


  public function testParseReportsCorrectCount() {
    $parser = $this->loadHTMLFile('intellitime-timereport-page.html');
    $reports = $parser->parse_reports();
    $this->assertEqual(7, count($reports), "expect seven reports");
  }

  public function testParseReportsOnlyUniqueIDs() {
    $parser = $this->loadHTMLFile('intellitime-timereport-page.html');
    $reports = $parser->parse_reports();
    foreach($reports as $report) {
      $id[$report->id] = TRUE;
    }
    $this->assertEqual(count($reports), count($id), "all IDs unique");
  }

  public function testParseReportsUTF8Encoding() {
    $parser = $this->loadHTMLFile('intellitime-timereport-page.html');
    $reports = $parser->parse_reports();
    $this->assertEqual("Testföretaget Effekt, Lagerarbetare", $reports[3]->title, "expect UTF-8 encoding");
  }

  public function testFindRowById() {
    $parser = $this->loadHTMLFile('intellitime-timereport-page.html');
    $row = $parser->find_row_by_id('mhbLP96iqH1DQyNUuxAbvM4hbku5Eii3');
    $this->assertEqual('OldRowsRepeater__ctl5_td1', (string) $row->td[0]['id'], "expect OldRowsRepeater__ctl5_td1");
  }
  public function testFindRowByIdShouldNotFindThis() {
    $parser = $this->loadHTMLFile('intellitime-timereport-page.html');
    $row = $parser->find_row_by_id('Expense.aspx?');
    $this->assertFalse($row, "expect FALSE caused by illegal ID.");
  }

  public function testBuildSelects() {
    $parser = $this->loadHTMLFile('intellitime-timereport-page.html');
    $selects = $parser->build_selects();
    $expected_array["CustOrdersDropDown"] = 0;
    $this->assertEqual($expected_array, $selects, "Expect CustOrdersDropDown = 0");
  }

}

class TZIntellitimeReportTestCase extends DrupalUnitTestCase {

  private $report = NULL;

  public static function getInfo() {
    return array(
      'name' => 'TZIntellitimeReport test suite',
      'description' => '',
      'group' => 'TimeZynk',
    );
  }

  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp('tzintellitime');
    require_once dirname(__FILE__) . '/tzintellitime.class.inc';
    $this->report = new TZIntellitimeReport();
  }

  public function tearDown() {
    parent::tearDown();
    $this->report = NULL;
  }

  public function testSetYearForReportWithNoMonth() {
    $years[0] = 2009;
    $this->assertFalse($this->report->set_year($years), "expected FALSE from ::set_year");
    $this->assertNull($this->report->year, 'Expected $report->year to be NULL');
  }

  public function testSetYearForReportWithMonthNotDecOrJan() {
    $this->report->month=11;
    $years[0] = 2009;
    $years[1] = 2010;
    $this->assertFalse($this->report->set_year($years), "expected FALSE from ::set_year");
    $this->assertNull($this->report->year, 'Expected $report->year to be NULL');
  }

  public function testSetYearWithTooFewYears() {
    $this->report->month = 1;
    $years = array();
    $this->assertFalse($this->report->set_year($years), 'Expected FALSE from::set_year called with empty $years');
    $this->assertNull($this->report->year, 'Expected $report->year to be NULL');
  }

  public function testSetYearWithTooManyYears() {
    $this->report->month = 1;
    $years[] = 2009;
    $years[] = 2010;
    $years[] = 2011;
    $this->assertFalse($this->report->set_year($years), 'Expected FALSE from::set_year called with too large $years');
    $this->assertNull($this->report->year, 'Expected $report->year to be NULL');
  }

  public function testSetYear() {
    $this->report->month = 1;
    $years[] = 2009;
    $this->assertTrue($this->report->set_year($years), 'Expected true');
    $this->assertEqual($years[0], $this->report->year, 'Expected year to be 2009, it was ' . $this->report->year);
  }

  public function testSetYearForFirstMonth() {
    $this->report->month = 1;
    $years[] = 2009;
    $years[] = 2010;
    $this->assertTrue($this->report->set_year($years), 'Expected true');
    $this->assertEqual($years[1], $this->report->year, 'Expected year to be 2010, it was ' . $this->report->year);
  }

  public function testSetYearForLastMonth() {
    $this->report->month = 12;
    $years[] = 2009;
    $years[] = 2010;
    $this->assertTrue($this->report->set_year($years), 'Expected true');
    $this->assertEqual($years[0], $this->report->year, 'Expected year to be 2009, it was ' . $this->report->year);
  }

  public function testComparisonIdentical() {
    $other_report = new TZIntellitimeReport();
    $this->report->id = 'mhbLP96iqH2Zr7CDtWyWb84hbku5Eii3';
    $other_report->id = 'mhbLP96iqH2Zr7CDtWyWb84hbku5Eii3';
    $this->report->done = FALSE;
    $other_report->done = FALSE;
    $this->report->year = 2010;
    $other_report->year = 2010;
    $this->report->month = 9;
    $other_report->month = 9;
    $this->report->day = 15;
    $other_report->day = 15;
    $this->report->title = "En dag i livet för en apa.";
    $other_report->title = "En dag i livet för en apa.";
    $this->report->begin = "08:00";
    $other_report->begin = "08:00";
    $this->report->end = "18:00";
    $other_report->end = "18:00";
    $this->report->break_duration_minutes = 24;
    $other_report->break_duration_minutes = 24;
    $this->report->overtime_hours = 4;
    $other_report->overtime_hours = 4;

    $this->assertEqual($this->report, $other_report, 'Expected the two reports to be considered equal.');
  }

  public function testComparisonDifferent() {
    $other_report = new TZIntellitimeReport();
    $this->report->id = 'mhbLP96iqH2Zr7CDtWyWb84hbku5Eii3';
    $other_report->id = 'mhbLP96iqH2Zr7cDtWyWb84hbku5Eii3';
    $this->report->done = FALSE;
    $other_report->done = FALSE;
    $this->report->year = 2010;
    $other_report->year = 2010;
    $this->report->month = 9;
    $other_report->month = 9;
    $this->report->day = 15;
    $other_report->day = 15;
    $this->report->title = "En dag i livet för en apa.";
    $other_report->title = "En dag i livet för en apa.";
    $this->report->begin = "08:00";
    $other_report->begin = "08:00";
    $this->report->end = "18:00";
    $other_report->end = "18:00";
    $this->report->break_duration_minutes = 24;
    $other_report->break_duration_minutes = 24;
    $this->report->overtime_hours = 4;
    $other_report->overtime_hours = 4;

    $this->assertNotEqual($this->report, $other_report, 'Expected the two reports to not be considered equal.');

  }

}

class TZIntellitimeAdminPageTests extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Intellitime Admin page test suite',
      'description' => '',
      'group' => 'TimeZynk',
    );
  }

  public function setUp() {
    // Enable any modules required for the test.
   parent::setUp('tzintellitime');
   // Create and login user
   $admin_user = $this->drupalCreateUser(array('administer site configuration'));
   $this->drupalLogin($admin_user);
  }

  public function testSetHTTPSBaseUrl() {
    $edit = array();
    $edit['tzintellitime_base_url'] = 'https://my2.intelliplan.se/IntelliplanWeb/v2005/Portal/Login.aspx?Gw27UDttLdgps9TM4HqqoQ%3d%3d';
    $this->drupalPost('admin/settings/timezynk/tzintellitime', $edit, t('Save configuration'));
    $this->assertText(t('The configuration options have been saved.'));
    $this->assertEqual($edit['tzintellitime_base_url'], variable_get('tzintellitime_base_url', ''),
      'Expected ' . $edit['tzintellitime_base_url'] . ', got ' . variable_get('tzintellitime_base_url', ''));
  }

  public function testSetHTTPBaseUrl() {
    $edit = array();
    // We should not accept HTTP connections
    $edit['tzintellitime_base_url'] = 'http://my2.intelliplan.se/IntelliplanWeb/v2005/Portal/Login.aspx?Gw27UDttLdgps9TM4HqqoQ%3d%3d';
    $this->drupalPost('admin/settings/timezynk/tzintellitime', $edit, t('Save configuration'));
    $this->assertText(t('We only allow HTTPS (SSL) connections to intelliplan for security reasons.'));
    $this->assertNotEqual($edit['tzintellitime_base_url'], variable_get('tzintellitime_base_url', ''),
      'Did not expect ' . $edit['tzintellitime_base_url'] . ', got ' . variable_get('tzintellitime_base_url', ''));
  }

  public function testSetInvalidBaseUrl() {
    $edit = array();
    // We should not accept HTTP connections
    $edit['tzintellitime_base_url'] = 'monkey';
    $this->drupalPost('admin/settings/timezynk/tzintellitime', $edit, t('Save configuration'));
    $this->assertText(t('Invalid URL, please enter a correct intelliplan login URL.'));
    $this->assertNotEqual($edit['tzintellitime_base_url'], variable_get('tzintellitime_base_url', ''),
      'Did not expect ' . $edit['tzintellitime_base_url'] . ', got ' . variable_get('tzintellitime_base_url', ''));
  }

}
