<?php

define('TZINTELLITIME_BASE_URL', variable_get('tzintellitime_base_url', ''));
define('TZINTELLITIME_SESSION_LIFETIME', 3600);
define('TZINTELLITIME_SESSION_CLEANUP', 24*3600);

require_once(dirname(__FILE__) . '/tzintellitime.autoload.inc');

/**
 * Implementation of hook_menu().
 */
function tzintellitime_menu() {
  $items = array();
  $items['admin/settings/timezynk/tzintellitime'] = array(
    'title' => 'Intellitime',
    'description' => 'Sitewide settings for the TimeZynk Intellitime bridge.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tzintellitime_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'tzintellitime.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function tzintellitime_user($op, &$edit, &$account, $category = NULL) {
  if ($op === 'view' && user_access('administer site configuration')) {
    $account->content['intellitime'] = array(
      '#type' => 'fieldset',
      '#title' => t('Intelliplan'),
      '#collapsible' => TRUE,
    );

    $account->content['intellitime']['user'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Intelliplan User'),
      '#description' => t('Is this user an intelliplan user?'),
      '#value' => empty($account->intellitime_user) ? 'false' : 'true',
    );

    if (tzintellitime_is_authenticated($account)) {
      $session_data = $account->intellitime_session_data;
      $location = 'window.location="' . $session_data['last_effective_url'] . '";';

      $account->content['intellitime']['last_effective_url'] = array(
        '#type' => 'user_profile_item',
        '#title' => 'Last effective url',
        '#value' => $session_data['last_effective_url']
      );
      $account->content['intellitime']['session_age'] = array(
        '#type' => 'user_profile_item',
        '#title' => t('Intelliplan session age'),
        '#description' => t('When was the intelliplan session created?'),
        '#value' => format_date($session_data['created'], 'small'),
      );
    }

    if (!empty($account->intellitime_last_sync)) {
      $account->content['intellitime']['last_sync'] = array(
        '#type' => 'user_profile_item',
        '#title' => t('Intelliplan last sync'),
        '#description' => t('Last synchronization with intelliplan'),
        '#value' => (empty($account->intellitime_active) ? 'Inactive: ' : 'Active: ') .
                    format_date($account->intellitime_last_sync, 'small'),
      );
    }
  }
}

/**
 * Implementation of hook_cron
 */
function tzintellitime_cron() {
  $cutoff = time() - TZINTELLITIME_SESSION_CLEANUP;
  db_query("DELETE FROM {tzintellitime_session} WHERE changed < %d", $cutoff);
  foreach(glob(file_directory_temp . '/tzcurl*') as $filename) {
    $ctime = filectime($filename);
    if ($ctime < $cutoff) {
      unlink($filename);
    }
  }
}

/**
 * Implementation of hook_nodeapi. Extend tzjob and tzreport nodes
 * with extra fields needed for mapping them to the corresponding
 * intellitime objects.
 * @param $node node to edit
 * @param $op operation
 * @param $a3 operation argument
 * @param $a4 operation argument
 * @see hook_nodeapi
 */
function tzintellitime_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if($node && ($node->type == 'tzjob' || $node->type == 'tzreport')) {
    switch($op) {
      case 'presave':
        /* By default we assume that we are storing local changes, unless the saving
         * code explicitly sets intellitime_synchronized to TRUE */
        if (!empty($node->intellitime_id)) {
          if (empty($node->intellitime_synchronized)) {
            $node->intellitime_local_changes = 1;
          } else {
            $node->intellitime_local_changes = 0;
          }
        } /*else if (empty($node->nid)) {
          // New node!
          $node->intellitime_local_changes = 1;
          $node->intellitime_id = "";
        }*/
        break;

      case 'delete':
        db_query('DELETE FROM {tzintellitime} WHERE nid = %d', $node->nid);
        break;

      case 'delete revision':
        db_query('DELETE FROM {tzintellitime} WHERE vid = %d', $node->vid);
        break;

      case 'insert':
        drupal_write_record('tzintellitime', $node);
        break;

      case 'load':
        $fields = db_fetch_array(db_query('SELECT * FROM {tzintellitime} WHERE vid = %d', $node->vid));
        if (empty($fields['intellitime_id']) && !empty($node->jobid)) {
          $job = tzbase_node_load($node->jobid);
          $fields['intellitime_jobid'] = $job->intellitime_id;
        }
        return $fields;
        break;

      case 'update':
        if(!empty($node->revision)) {
          // new revision, treat as insert
          drupal_write_record('tzintellitime', $node);
        } else {
          // update of previous revision
          drupal_write_record('tzintellitime', $node, 'vid');
        }
        break;
    }
  }
}

/**
 * Implements hook_form_alter(). A very important function in this file,
 * It:
 * - inserts our own authentication hook into all login forms.
 * - adds intellitime id to the node form
 */
function tzintellitime_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_login' || $form_id == 'user_login_block') {
    if (isset($form['#validate']) && is_array($form['#validate'])) {
      $validate_key = array_search('user_login_authenticate_validate', $form['#validate']);
      if($validate_key !== FALSE) {
        // replace standard authentication function
        $form['#validate'][$validate_key] = 'tzintellitime_login_authenticate_validate';
      } else {
        // standard function deactivated by other module, insert ourselves next-last
        $final_validator = array_pop($form['#validate']);
        $form['#validate'][] = 'tzintellitime_login_authenticate_validate';
        $form['#validate'][] = $final_validator;
      }
    }
  } else if($form_id == 'tzreport_node_form') {
    $node = $form['#node'];
    $form['intellitime_id'] = array(
      '#type' => 'value',
      '#value' => isset($node->intellitime_id) ? $node->intellitime_id : 'not set',
    );
  }
}

/**
 * Authenticate a user towards intellitime
 * @param Array $form
 * @param Array $form_state
 */
function tzintellitime_login_authenticate_validate($form, &$form_state) {
  global $user;

  if(!empty($user->uid)) {
    // Another module has already handled authentication
    return;
  }

  $username = $form_state['values']['name'];
  $password = trim($form_state['values']['pass']);

  // Check for valid user name
  user_login_name_validate($form, $form_state);

  // Load the user if it is exists and is not blocked
  $account = user_load(array('name' => $username, 'pass' => $password, 'status' => 1));

  // Any errors so far?
  if(form_get_errors()) {
    return;
  }

  if (!$account || tzintellitime_session_needs_refresh($account)) {
    try {
      $user = tzintellitime_server_auth($account, $username, $password);

      // Schedule for sync
      if(empty($user->intellitime_active) && module_exists('tzintellitime_sync')) {
        tzintellitime_sync_schedule_user($user->uid);
      }
    } catch(TZNetworkFailureException $e) {
      watchdog('tzintellitime', 'Network problem when authenticating @user: @msg',
        array('@user' => $username, '@msg' => $e->getMessage()),
        WATCHDOG_WARNING);
    } catch(TZIntellitimeErrorPageException $e) {
      $message = t('Error page when authenticating @user: @msg',
                   array('@user' => $username, '@msg' => $e->getMessage()));
      tzbase_watchdog_with_data('tzintellitime', $message, $e->getRawData(), WATCHDOG_DEBUG);
    } catch(TZAuthenticationFailureException $e) {
      tzbase_watchdog_with_data('tzintellitime',
                                t('Failed to authenticate @user', array('@user' => $username)),
                                $e->getRawData(),
                                WATCHDOG_WARNING);
      // Set form error to stop login
      form_set_error('name', t('Invalid username or password for %name.', array('%name' => $username)));
    }
  }

  // Fallback to password authentication
  if(empty($user->uid)) {
    user_authenticate($form_state['values']);
  }
}

function tzintellitime_session_needs_refresh($account) {
  if (empty($account->intellitime_user)) {
    // Not intellitime user, no point to refresh anything
    return FALSE;
  }
  if (!tzintellitime_is_authenticated($account)) {
    // Authentication expired, refresh session now
    return TRUE;
  }
  if (empty($account->intellitime_session_data['created'])) {
    // Session creation time unknown, better refresh
    return TRUE;
  }
  if ($account->intellitime_session_data['created'] + TZINTELLITIME_SESSION_LIFETIME < time()) {
    // Session is still valid, but getting old. Refresh to extend.
    return TRUE;
  }
  return FALSE;
}

/**
 * Validate username and password against Intellitime Server
 */
function tzintellitime_server_auth($account, $username, $password) {
  // new user or existing user with expired cookie-jar.
  TZCurl::destroySessionData($account->uid);

  $curl = new TZCurl($account->uid);

  try {
    $server = new IntellitimeServer($curl);
    $fullname = IntellitimeLoginPage::login($server, TZINTELLITIME_BASE_URL, $username, $password);
    $curl->closeAndPersistSession();

    $account = tzuser_add_user(array(
      'username' => $username,
      'fullname' => $fullname,
      'password' => $password,
      'extra_data' => array(
         'login' => time(),
         'access' => time(),
         'intellitime_user' => TRUE,
         'intellitime_session_data' => $curl->getSessionData(),
      ),
    ));

    return $account;

  } catch (TZIntellitimeServerException $e) {
    // Make sure curl writes session to disk before it is destroyed, instead of after
    $curl->close();
    TZCurl::destroySessionData($account->uid);
    throw $e;
  }
}

function tzintellitime_tzuser_add_user_data_alter(&$user_data) {
  $user_data['intellitime_user'] = TRUE;
}

function tzintellitime_api_info_alter(&$info) {
  if (TZINTELLITIME_BASE_URL) {
    $info['intellitime_base_url'] = TZINTELLITIME_BASE_URL;
  }
}

/**
 * Load a node by searching for the intellitime ID
 * @param string $intellitime_id
 * @return Node if intellitime ID was found, otherwise NULL
 */
function tzintellitime_node_load_by_intellitime_id($intellitime_id) {
  if (empty($intellitime_id)) {
    return NULL;
  }
  $nid = db_result(db_query("SELECT nid FROM {tzintellitime} WHERE intellitime_id = '%s' ORDER BY vid DESC LIMIT 1", $intellitime_id));
  return tzbase_node_load($nid);
}

function tzintellitime_get_intellitime_id($tzreport) {
  if (empty($tzreport->intellitime_id)) {
    return 'NEW_NODE_WITH_NID_' . $tzreport->nid;
  }
  $id = @unserialize($tzreport->intellitime_id);
  return $id[2];
}

/**
 *
 * Private function to check if an account that has already
 * been verified to be an intellitime account has valid authentication.
 * @param unknown_type $account
 */
function tzintellitime_is_authenticated($account) {
  return ($account && !empty($account->intellitime_user) &&
    TZCurl::hasValidSessionData($account->uid)
  );
}

/**
 * Make an array containing the boundaries for the week.
 * @param $date a date in the week to check
 * @return Array (first second of week, first second of next week)
 */
function tzintellitime_week_span($date) {
  $weekSpan = array();
  $timezone = date_default_timezone(FALSE);
  // Find beginning and end of week
  $weekString = $date->format('o\WW');
  $weekSpan[0] = new DateTime($weekString, $timezone);
  $weekSpan[0]->modify('midnight');
  $weekSpan[1] = clone($weekSpan[0]);
  $weekSpan[1]->modify('+7 days');
  return $weekSpan;
}

/**
  * Alter hook for prometheus metrics
  */
function tzintellitime_prometheus_metrics_alter(&$client) {
  $session_updated_ago = $client->newHistogram(array(
    'namespace' => 'intellitime',
    'subsystem' => 'session',
    'name' => 'updated_ago',
    'help' => 'Number of seconds since the session was last updated',
    'buckets' => range(0,1800,100)
  ));

  $session_created_ago = $client->newHistogram(array(
    'namespace' => 'intellitime',
    'subsystem' => 'session',
    'name' => 'created_ago',
    'help' => 'Number of seconds since the session was created',
    'buckets' => range(0,25*3600,3600)
  ));

  $result = db_query('SELECT created,changed FROM {tzintellitime_session}');
  $num_sessions = 0;
  $now = time();

  while ($session = db_fetch_object($result)) {
    $num_sessions += 1;
    $changed = $now - $session->changed;
    $created = $now - $session->created;
    $session_updated_ago->observe([], $changed);
    $session_created_ago->observe([], $created);
  }
}
