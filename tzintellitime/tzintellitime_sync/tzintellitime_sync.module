<?php

define('TZINTELLITIME_SYNC_INTERVAL_MINUTES', variable_get('tzintellitime_sync_interval_minutes', 0));
define('TZINTELLITIME_SYNC_USERS_PER_RUN', variable_get('tzintellitime_sync_users_per_run', 100));
define('TZINTELLITIME_SYNC_PARALLEL_THREADS', variable_get('tzintellitime_sync_parallel_threads', 2));
define('TZINTELLITIME_SYNC_WEEKS_FORWARD', variable_get('tzintellitime_sync_weeks_forward', 2));
define('TZINTELLITIME_SYNC_WEEKS_BACKWARD', variable_get('tzintellitime_sync_weeks_backward', 2));

/** Sync both new users and users with expired session on login */
define('TZINTELLITIME_SYNC_INITIAL_SYNC_BOTH', 'both');

/** Sync only new users on login */
define('TZINTELLITIME_SYNC_INITIAL_SYNC_NEW', 'new');

/** Defer all synchronization to the next scheduled occasion */
define('TZINTELLITIME_SYNC_INITIAL_SYNC_NONE', 'none');

/** Actual set value from drupal admin page */
define('TZINTELLITIME_SYNC_INITIAL_SYNC', variable_get('tzintellitime_sync_initial_sync', TZINTELLITIME_SYNC_INITIAL_SYNC_BOTH));

define('TZINTELLITIME_SYNC_ABSENCE_PARENT_JOB_ID', 'TimeZynkIntellitimeSyncAbsenceParent');

/**
 * Implementation of hook_user, annotates the user object with additional synchronization information
 */
function tzintellitime_sync_user($op, &$edit, &$account, $category = NULL) {
  switch($op) {
    case 'delete':
      db_query('DELETE FROM {tzintellitime_sync} WHERE uid = %d', $account->uid);
      break;

    case 'insert':
      if(isset($edit['intellitime_last_sync'])) {
        drupal_write_record('tzintellitime_sync', $edit);
      }
      $edit['intellitime_last_sync'] = NULL;
      $edit['intellitime_active'] = NULL;
      break;

    case 'load':
      $fields = db_fetch_array(db_query('SELECT * FROM {tzintellitime_sync} WHERE uid = %d', $account->uid));
      if($fields) {
        foreach($fields as $field => $value) {
          $account->$field = $value;
        }
      }
      break;

    case 'update':
      if(isset($edit['intellitime_last_sync']) || isset($edit['intellitime_active'])) {
        $entry = array_merge(array('uid' => $account->uid), $edit);
        drupal_write_record('tzintellitime_sync', $entry, 'uid');
      }
      $edit['intellitime_last_sync'] = NULL;
      $edit['intellitime_active'] = NULL;
      break;
  }
}

/**
 * Implementation of hook_menu. Adds settings page to admin section.
 */
function tzintellitime_sync_menu() {
  $items = array();
  $items['admin/settings/timezynk/tzintellitime_sync'] = array(
    'title' => 'Intellitime Sync',
    'description' => 'Data synchronization settings for the TimeZynk Intellitime bridge.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tzintellitime_sync_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'tzintellitime_sync.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Add synchronization option to user operations
 */
function tzintellitime_sync_user_operations() {
  $operations['tzintellitime_sync_schedule'] = array(
    'label' => t('Synchronize user with Intelliplan'),
    'callback' => 'tzintellitime_sync_schedule_list',
  );
  return $operations;
}

/**
 * Alter hook for computed TZUserStatus
 * @param  TZUserStatus $status
 */
function tzintellitime_sync_tzuser_status_alter(&$status) {
  /* Since our goal is to ensure that GREEN users are also fully synced,
   * we don't need to process the status unless it is GREEN
   */
  if ($status->getStatusCode() != TZUserStatus::GREEN) {
    return;
  }

  // Green user, get intellitime info to perform extra checks
  $result = db_query('SELECT * FROM tzintellitime_sync WHERE uid = %d', $status->getUid());
  $sync_info = db_fetch_object($result);
  if(!empty($sync_info)) {
    $status = new TZIntellitimeUserStatus($status, $sync_info);
  }
}

function tzintellitime_sync_schedule_list($users) {
  if(!empty($users)) {
    foreach($users as $uid) {
      tzintellitime_sync_schedule_user($uid, true);
    }
  }
}

/**
 * Schedule the user with specified uid for synchronizations as soon as possible.
 * @param int $uid user id
 */
function tzintellitime_sync_schedule_user($uid, $force_sync = false) {
  if($uid) {
    $result = db_query('SELECT * FROM {tzintellitime_sync} WHERE uid = %d', $uid);
    if($entry = db_fetch_object($result)) {
      $entry->intellitime_active = 1;
      drupal_write_record('tzintellitime_sync', $entry, 'uid');

      if($force_sync ||
         TZINTELLITIME_SYNC_INITIAL_SYNC == TZINTELLITIME_SYNC_INITIAL_SYNC_BOTH) {
        tzintellitime_sync_synchronize_user($uid);
      }
    } else {
      $entry = array('uid' => $uid, 'intellitime_active' => 1);
      drupal_write_record('tzintellitime_sync', $entry);
      if($force_sync ||
         TZINTELLITIME_SYNC_INITIAL_SYNC == TZINTELLITIME_SYNC_INITIAL_SYNC_BOTH ||
         TZINTELLITIME_SYNC_INITIAL_SYNC == TZINTELLITIME_SYNC_INITIAL_SYNC_NEW) {
        tzintellitime_sync_synchronize_user($uid);
      }
    }
    return TRUE;
  }
  return FALSE;
}

function tzintellitime_sync_unschedule_user($uid) {
  if($uid) {
    db_query('UPDATE {tzintellitime_sync} SET intellitime_active = 0 WHERE uid = %d', $uid);
    return TRUE;
  }
  return FALSE;
}

/**
 * Synchronize users that have exceeded the current synchronization interval.
 */
function tzintellitime_sync_synchronize_users() {
  $sync_limit = time() - TZINTELLITIME_SYNC_INTERVAL_MINUTES*60;
  $result = db_query_range('SELECT uid FROM {tzintellitime_sync} WHERE intellitime_active = 1 AND intellitime_last_sync <= %d ORDER BY intellitime_last_sync ASC', $sync_limit, 0, TZINTELLITIME_SYNC_USERS_PER_RUN);
  while($uid = db_result($result)) {
    tzintellitime_sync_synchronize_user($uid);
  }
}

function tzintellitime_sync_synchronize_user($uid) {
  // Load user account
  $account = user_load(array('uid' => $uid));
  if(!$account) {
    watchdog('tzintellitime', 'Tried to start synchronization for illegal user id "@uid"', array('@uid' => $uid), WATCHDOG_WARNING);
    return;
  }

  if(!tzintellitime_is_authenticated($account)) {
    // User not found or not intellitime user
    tzintellitime_sync_warning('No session available', $account);
    user_save($account, array('intellitime_active' => 0));
    return TZIntellitimeSyncController::AUTH_FAILURE;
  }

  try {
    // SyncPolicy starting today
    $startDate = tzbase_make_date();
    $syncPolicy = new TZIntellitimeSimpleSyncPolicy(
        $account,
        $startDate,
        TZINTELLITIME_SYNC_WEEKS_FORWARD,
        TZINTELLITIME_SYNC_WEEKS_BACKWARD
    );

    $curl = new TZCurl($account->intellitime_session_data);
    $serverInterface = new TZIntellitimeBot($curl, TZINTELLITIME_BASE_URL);

    $weekFactory = new TZIntellitimeDefaultWeekFactory($serverInterface, $account);

    $reportStorage = new TZIntellitimeDBReportStorage($account);

    $userJobsMappingPolicy = new TZIntellitimeUserJobsMappingPolicy(tzbase_user_jobs_mapper(), $account);

    $ctrlr = new TZIntellitimeSyncController($syncPolicy, $weekFactory, $reportStorage, $userJobsMappingPolicy, $account);
    $ctrlr->registerLogger(new TZWatchdogLogger());
    $ctrlr->registerLogger(new TZSmsLogger());
    $result = $ctrlr->synchronize();

    // Make sure curl write its session to disk
    $curl->close();
  } catch (InvalidArgumentException $e) {
    tzintellitime_sync_warning('Caught InvalidArgumentException', $account);
    $result = TZIntellitimeSyncController::AUTH_FAILURE;
  }

  if(TZIntellitimeSyncController::SYNC_OK === $result) {
    $account = user_save($account, array('intellitime_last_sync' => time()));
  } elseif(TZIntellitimeSyncController::AUTH_FAILURE === $result) {
    // Failed authentication, unschedule user
    tzintellitime_sync_warning('Expired session', $account);
    TZCurl::destroySessionData($account->intellitime_session_data);
    user_save($account, array('intellitime_session_data' => NULL, 'intellitime_active' => 0));
  } else {
    // Hopefully a temporary failure, log
    tzintellitime_sync_warning('Failed to synchronize', $account);
  }

  return $result;
}

function tzintellitime_sync_notice($message, $account) {
  tzintellitime_sync_log($message, $account, WATCHDOG_NOTICE);
}

function tzintellitime_sync_warning($message, $account) {
  tzintellitime_sync_log($message, $account, WATCHDOG_WARNING);
}

function tzintellitime_sync_log($message, $account, $severity) {
  $session_age = time();
  if(!empty($account->intellitime_session_data['created'])) {
    $session_age -= $account->intellitime_session_data['created'];
  }

  watchdog('tzintellitime', '@message, @name (@uid), last sync @interval ago, session created @age ago',
         array(
           '@message' => $message,
           '@name' => $account->name,
           '@uid' => $account->uid,
           '@interval' => format_interval(time() - $account->intellitime_last_sync),
           '@age' => format_interval($session_age),
         ),
         WATCHDOG_NOTICE,
         theme('username', $account));
}
