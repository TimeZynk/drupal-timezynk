<?php

class TZIntellitimeSyncTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'TZIntellitimeSync Test Suite',
      'description' => '',
      'group' => 'TZIntellitimeSync',
    );
  }

  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp('libraries', 'date_api', 'date_timezone', 'tzbase', 'tzintellitime', 'tzintellitime_mock', 'tzintellitime_sync');

    // Include resources
    tzbase_include_proto_classes();
    tzintellitime_include_classes();
    require_once dirname(__FILE__) . '/tzintellitime_sync.class.inc';

    $this->account = $this->drupalCreateUser(array('access content'));
    $this->drupalLogin($this->account);
  }

  function testMissingJobs() {
    $syncPersister = new TZIntellitimePersister($this->account);
    $intellireport = $this->createReport();
    $tzreport = $syncPersister->store_report($intellireport);
    $this->assertNotNull($tzreport);
    $this->assertTrue($tzreport->nid);
    $this->assertTrue($tzreport->jobid);
    $job = node_load($tzreport->jobid);
    $this->assertEqual($tzreport->title, $job->title);
  }

  function testMissingJobExistingReport() {
    $syncPersister = new TZIntellitimePersister($this->account);
    $intellireport = $this->createReport();
    $tzreport = $syncPersister->store_report($intellireport);
    $jobid = $tzreport->jobid;

    $syncPersister = new TZIntellitimePersister($this->account);
    $syncPersister->add_existing_report($tzreport);
    $tzreport2 = $syncPersister->store_report($intellireport);
    $this->assertEqual($jobid, $tzreport2->jobid);
    $this->assertIdentical($tzreport, $tzreport2);
  }

  /*
   * Makes sure that the normal case, actually having a matching job in the job map works alright.
   */
  function testNonMissingJob() {
    $syncPersister = new TZIntellitimePersister($this->account);
    $intellireport = $this->createReport();
    // Make sure that report and job have the same title so that they will match.
    $job = $syncPersister->store_job($this->createAssignment($intellireport->title));
    $tzreport = $syncPersister->store_report($intellireport);
    $this->assertEqual($job->nid, $tzreport->jobid);
  }

  public function testCreatingJob() {
    $syncPersister = new TZIntellitimePersister($this->account);
    $assignment = $this->createAssignment();
    $node = $syncPersister->store_job($assignment);
    $this->assertNotNull($node);
    $this->assertTrue($node->nid, "Expected valid drupal ID.");
    $this->assertEqual($assignment->id, $node->intellitime_id, 'Expected same intellitime id.');
    $this->assertEqual($assignment->title, $node->title, 'Expected equal titles');
  }

  public function testUpdatingExistingJob() {
    $syncPersister = new TZIntellitimePersister($this->account);
    $assignment = $this->createAssignment();
    $nodes[] = $syncPersister->store_job($assignment);
    $assignment->title .= '2';
    $nodes[] = $syncPersister->store_job($assignment);
    $this->assertEqual($nodes[0]->nid, $nodes[1]->nid, 'Expected same node-id');
    $this->assertEqual($assignment->title, $nodes[1]->title, 'Expected equal titles');
  }

  public function testCreateChildJob() {
    $syncPersister = new TZIntellitimePersister($this->account);
    $parent_job = $this->createAssignment();
    $parent_node = $syncPersister->store_job($parent_job);
    $assignment = $this->createAssignment();
    $node = $syncPersister->store_job($assignment, $parent_node->nid);
    $this->assertEqual($parent_node->nid, $node->parentid);
    $this->assertEqual(0, $parent_node->parentid);
  }

  public function testUpdatingExistingReport() {
    $syncPersister = new TZIntellitimePersister($this->account);
    $report = $this->createReport();
    $assignment = $this->createAssignment($report->title);
    $job_node = $syncPersister->store_job($assignment);
    $report_node = $syncPersister->store_report($report);

    // Update report and create again
    $report->break_duration_minutes = 35;
    $syncPersister->add_existing_report($report_node);
    $report_node2 = $syncPersister->store_report($report);

    $this->assertEqual($report_node->nid, $report_node2->nid, 'Expected equal NID after update');
    $this->assertEqual($report->break_duration_minutes*60, $report_node2->breakduration, 'Expected updated breakduration');
  }

  function createAssignment($title = "A very nice job..") {
    $assignment = new TZIntellitimeAssignment();
    $assignment->id = uniqid('testjob');
    $assignment->title = $title;
    $assignment->report_key = $title;
    return $assignment;
  }

  function createReport($title = "En dag i livet fÃ¶r en apa.", $year = 2010, $month = 9, $day = 1) {
    $report = new TZIntellitimeReport();
    $report->id = uniqid('testreport');
    $report->state = TZIntellitimeReport::STATE_OPEN;
    $report->year = $year;
    $report->month = $month;
    $report->day = $day;
    $report->title = $title;
    $report->begin = "08:00";
    $report->end = "18:00";
    $report->comment = "Report on $year-$month-$day";
    $report->break_duration_minutes = 24;
    return $report;
  }

  protected function assertEqual($first, $second, $message = '', $group = 'Other') {
    if(!$message) {
      $message = 'Expected "' . $first . '", got "' . $second . '"';
    }
    parent::assertEqual($first, $second, $message, $group);
  }
}

class TZIntellitimeSyncUnitTestCase extends DrupalUnitTestCase {
  public static function getInfo() {
    return array(
      'name' => 'TZIntellitimeSync Unit Test Suite',
      'description' => '',
      'group' => 'TZIntellitimeSync',
    );
  }

  public function setUp() {
    require_once dirname(__FILE__) . '/tzintellitime_sync.class.inc';
    $this->persister = new TZIntellitimePersister(NULL);
  }

  public function testMatchJobShouldFindNid() {
    $this->persister->jobmap = array(
      'Axis Commun, Lagerarbeta, Q6032, spec' => 1,
      'Axis Communic, Lagerarbeta, "Heating"' => 2,
      'Axis Communicatio, Lagerarbeta, P553' => 3,
      'Lagerarbetare, TimeZynk' => 4,
    );

    $titles = array(
      'Axis Communication AB, Lagerarbetare, Q6032, spec. prod.',
      'Axis Communication AB, Lagerarbetare, "Heating"',
      'Axis Communicatio, Lagerarbeta, P5534',
      'Lagerarbetare, TimeZynk',
    );
    $count = sizeof($titles);
    for ($i = 0; $i < $count; $i++) {
      $title = $titles[$i];
      $nid = $this->persister->match_job($title);
      $this->assertEqual($nid, $i+1);
    }
  }

  public function testMatchJobShouldReturnFalse() {
    $this->persister->jobmap = array(
      'Axis Commun, Lagerarbeta, Q6032, spec' => 1,
      'Axis Communic, Lagerarbeta, "Heating"' => 2,
      'Axis Communicatio, Lagerarbeta, P553' => 3,
      'Lagerarbetare, TimeZynk' => 4,
    );

    $titles = array(
      'Axis CommYnication AB, Lagerarbetare, Q6032, spec. prod.',
      'Axis Communication AB, LagerarbetYre, "Heating"',
      'Axis Communicatio, Lagerarbeta, P55Y4',
      'Lagerarbetar, TimeZyn',
    );
    $count = sizeof($titles);
    for ($i = 0; $i < $count; $i++) {
      $title = $titles[$i];
      $nid = $this->persister->match_job($title);
      $this->assertFalse($nid, t('Expected titles to not match'));
    }
  }
}