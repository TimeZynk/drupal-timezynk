<?php

class TZIntellitimeSyncTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'TZIntellitimeSync Test Suite',
      'description' => '',
      'group' => 'TZIntellitimeSync',
    );
  }

  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp('libraries', 'date_api', 'date_timezone', 'tzbase', 'tzintellitime', 'tzintellitime_mock', 'tzintellitime_sync');

    // Use mock intellitime URL
    variable_set('tzintellitime_base_url', url('IntelliplanWeb/Login.aspx', array('absolute' => TRUE)));
    variable_set('date_default_timezone_name', 'Europe/Stockholm');

    // Include resources
    tzbase_include_proto_classes();
    tzintellitime_include_classes();
    require_once dirname(__FILE__) . '/tzintellitime_sync.class.inc';

    // Create and test user
    $account = (object)array('name' => 'test user', 'pass_raw' => 'test password');
    $this->login_timestamp = time();
    $this->drupalLogin($account);
    $this->account = user_load(array('name' => 'test user'));
    $this->assertTrue($this->account, 'account created for ' . $this->account->name);
  }

  public function testIsCorrectlySynchronizedOnFirstLogin() {
    $this->assertTrue($this->login_timestamp <= $this->account->intellitime_last_sync);
  }

  public function testScheduleHandler() {
    $this->doTestScheduleUser();
  }

  private function doTestScheduleUser() {
    $num_rows = db_result(db_query('SELECT COUNT(*) FROM {tzintellitime_sync}'));
    $this->assertTrue($num_rows);
    $this->assertTrue(0 <= $this->account->intellitime_last_sync);
  }

  public function testMatchJobShouldNotReturnFalse() {
    $jobmap = array(
      'Axis Commun, Lagerarbeta, Q6032, spec' => 1,
      'Axis Communic, Lagerarbeta, "Heating"' => 2,
      'Axis Communicatio, Lagerarbeta, P553' => 3,
      'Lagerarbetare, TimeZynk' => 4,
    );

    $titles = array(
      'Axis Communication AB, Lagerarbetare, Q6032, spec. prod.',
      'Axis Communication AB, Lagerarbetare, "Heating"',
      'Axis Communicatio, Lagerarbeta, P5534',
      'Lagerarbetare, TimeZynk',
    );
    $count = sizeof($titles);
    for ($i = 0; $i < $count; $i++) {
      $title = $titles[$i];
      $nid = TZIntellitimeSyncController::match_job($jobmap, $title);
      $this->assertEqual($nid, $i+1);
    }
  }

public function testMatchJobShouldReturnFalse() {
    $jobmap = array(
      'Axis Commun, Lagerarbeta, Q6032, spec' => 1,
      'Axis Communic, Lagerarbeta, "Heating"' => 2,
      'Axis Communicatio, Lagerarbeta, P553' => 3,
      'Lagerarbetare, TimeZynk' => 4,
    );

    $titles = array(
      'Axis CommYnication AB, Lagerarbetare, Q6032, spec. prod.',
      'Axis Communication AB, LagerarbetYre, "Heating"',
      'Axis Communicatio, Lagerarbeta, P55Y4',
      'Lagerarbetar, TimeZyn',
    );
    $count = sizeof($titles);
    for ($i = 0; $i < $count; $i++) {
      $title = $titles[$i];
      $nid = TZIntellitimeSyncController::match_job($jobmap, $title);
      $this->assertFalse($nid, t('Expected titles to not match'));
    }
  }

  public function testCreatingData() {
    $this->controller = new TZIntellitimeSyncController($this->account);
    $this->doTestCreatingJob();
    $this->doTestUpdatingExistingJob();
    $this->doTestCreatingReport();
    $this->doTestUpdatingExistingReport();
    $this->doTestCreateChildJob();
    $this->doTestCreatingReportWithoutJobShallFail();
  }

  public function doTestCreatingJob() {
    $assignment = $this->createAssignment();
    $node = $this->controller->create_job($assignment);
    $this->assertNotNull($node);
    $this->assertTrue($node->nid, "Expected valid drupal ID.");
    $this->assertEqual($assignment->id, $node->intellitime_id, 'Expected same intellitime id.');
    $this->assertEqual($assignment->title, $node->title, 'Expected equal titles');
  }

  public function doTestUpdatingExistingJob() {
    $assignment = $this->createAssignment();
    $nodes[] = $this->controller->create_job($assignment);
    $assignment->title .= '2';
    $nodes[] = $this->controller->create_job($assignment);
    $this->assertEqual($nodes[0]->nid, $nodes[1]->nid, 'Expected same node-id');
    $this->assertEqual($assignment->title, $nodes[1]->title, 'Expected equal titles');
  }

  public function doTestCreateChildJob() {
    $parent_job = $this->createAssignment();
    $parent_node = $this->controller->create_job($parent_job);
    $assignment = $this->createAssignment();
    $node = $this->controller->create_job($assignment, $parent_node->nid);
    $this->assertEqual($parent_node->nid, $node->parentid);
    $this->assertEqual(0, $parent_node->parentid);
  }

  public function doTestCreatingReport() {
    $report = $this->createReport();
    $assignment = $this->createAssignment($report->title);
    $job_node = $this->controller->create_job($assignment);
    $report_node = $this->controller->create_report($report, array($assignment->title => $job_node->nid));
    $this->assertNotNull($report_node);
    $this->assertTrue($report_node->nid);
  }

  public function doTestUpdatingExistingReport() {
    $report = $this->createReport();
    $assignment = $this->createAssignment($report->title);
    $job_node = $this->controller->create_job($assignment);
    $report_node = $this->controller->create_report($report, array($assignment->title => $job_node->nid));

    // Update report and create again
    $report->break_duration_minutes = 35;
    $report_map[$report_node->intellitime_id] = $report_node;
    $report_node2 = $this->controller->create_report($report, array($assignment->title => $job_node->nid), $report_map);

    $this->assertEqual($report_node->nid, $report_node2->nid, 'Expected equal NID after update');
    $this->assertEqual($report->break_duration_minutes*60, $report_node2->breakduration, 'Expected updated breakduration');
  }

  public function doTestCreatingReportWithoutJobShallFail() {
    $report = $this->createReport();
    $report_node = $this->controller->create_report($report);
    $this->assertNull($report_node);
  }

  function createAssignment($title = "A very nice job..") {
    $assignment = new TZIntellitimeAssignment();
    $assignment->id = uniqid('testjob');
    $assignment->title = $title;
    $assignment->report_key = $title;
    return $assignment;
  }

  function createReport() {
    $report = new TZIntellitimeReport();
    $report->id = uniqid('testreport');
    $report->state = TZIntellitimeReport::STATE_OPEN;
    $report->year = 2010;
    $report->month = 9;
    $report->day = 15;
    $report->title = "En dag i livet fÃ¶r en apa.";
    $report->begin = "08:00";
    $report->end = "18:00";
    $report->break_duration_minutes = 24;
    $report->overtime_hours = 4;
    return $report;
  }

  /** Override assertEqual to get nice log prints by default */
  protected function assertEqual($first, $second, $message = '', $group = 'Other') {
    if(!$message) {
      $message = 'Expected "' . $first . '", got "' . $second . '"';
    }
    parent::assertEqual($first, $second, $message, $group);
  }
}

