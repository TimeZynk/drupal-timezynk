<?php

define('TZINTELLITIME_MOCK_DELAY_MILLIS', variable_get('tzintellitime_mock_delay_millis', '0'));
define('TZINTELLITIME_MOCK_ENABLE_COMMENTS', variable_get('tzintellitime_mock_enable_comments', '1'));
define('TZINTELLITIME_MOCK_ERROR_CODE', variable_get('tzintellitime_mock_error_code', '200'));

/**
 * Implementation of hook_init
 * Disables caching for this page
 * @return unknown_type
 */
function tzintellitime_mock_init() {
  // We don't want caching for this module
  if (drupal_match_path($_GET['q'], 'IntelliplanWeb*')) {
    $GLOBALS['conf']['cache'] = FALSE;
  }
}

function tzintellitime_mock_menu() {
  $items['IntelliplanWeb'] = array(
    'title' => 'Intellitime Mock Login',
    'page callback' => 'tzintellitime_mock_request',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
    $items['admin/settings/tzintellitime_mock'] = array(
    'title' => 'Intellitime Mock',
    'description' => 'Settings for Intellitime Mockup site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tzintellitime_mock_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'tzintellitime_mock.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function tzintellitime_mock_admin_settings_block() {
  return theme('admin_block_content', system_admin_menu_block(menu_get_item()));
}

function tzintellitime_mock_theme() {
  return array(
    'page' => array(
      'arguments' => array('content' => NULL, 'show_blocks' => TRUE, 'show_messages' => TRUE),
      'template' => 'page-IntelliplanWeb',
    ),
    'mock_user_table' => array(
      'arguments' => array(),
    ),
    'mock_assignments_table' => array(
      'arguments' => array(),
    ),
  );
}

function tzintellitime_mock_preprocess_page(&$variables) {
  if (!drupal_match_path($_GET['q'], 'IntelliplanWeb*TimeReport*')) {
    return;
  }

  $mock_user = tzintellitime_mock_load_user($_SESSION['tzintellitime_mock_user_id']);

  $firstweek = empty($_GET['DateInWeek']);
  $date = NULL;
  if(!$firstweek) {
    $date = date_make_date($_GET['DateInWeek'] . ' 12:00:00');
  }

  $variables['username'] = $mock_user->login;
  $variables['comments'] = TZINTELLITIME_MOCK_ENABLE_COMMENTS;

  $all_reports = tzintellitime_mock_get_reports($mock_user);
  usort($all_reports, 'tzintellitime_mock_compare_reports');
  $reports = array();
  $unfinished_weeks = array();
  $total_duration = 0;
  // array to match ctl-ids with report-ids. the position matches the ctl number (ctlmapping[0] is ctl0 and so on)
  $ctlmapping = array();
  foreach($all_reports as $report) {
    if(!$date) {
      if($report->state == TZIntellitimeReport::STATE_OPEN) {
        $date = clone $report->get_begintime();
      } else {
        continue;
      }
    }
    $reportweek = $report->get_begintime()->format('o\WW');
    $dateweek = $date->format('o\WW');

    if($report->state == TZIntellitimeReport::STATE_OPEN) {
      $unfinished_weeks[$reportweek] = $report->get_begintime()->format('Y-m-d');
    }

    if($dateweek == $reportweek) {
      $begintime = $report->get_begintime();
      $endtime = $report->get_endtime();
      if($endtime < $begintime) {
        $endtime->modify('+1 day');
      }
      $duration = $endtime->format('U') - $begintime->format('U') - $report->break_duration_minutes*60;
      $total_duration += $duration;
      $report->duration_hours = round($duration/3600,2);
      $reports[] = $report;
      $ctlmapping[] = $report->id;
    }
  }
  $serializedreportids = serialize($ctlmapping);
  $variables['ctlmap'] = base64_encode($serializedreportids);

  if(!$date) {
    // If date is still null we have no reports, default to this week
    $date = tzbase_make_date();
  }

  $variables['reports'] = $reports;
  $variables['unfinished_weeks'] = $unfinished_weeks;
  $variables['total_duration_hours'] = round($total_duration/3600,2);

  $all_assignments = tzintellitime_mock_get_assignments();
  $assignments = array();
  $absence_codes = array();
  foreach($all_assignments as $assignment) {
    if(TZIntellitimeAssignment::TYPE_ASSIGNMENT == $assignment->type) {
      $assignments[] = $assignment;
    } else {
      $absence_codes[] = $assignment;
    }
  }

  $variables['assignments'] = $assignments;
  $variables['absence_codes'] = $absence_codes;

  $variables['current_week'] = $date->format('W');
  $variables['DateInWeek'] = $date->format('Y-m-d');

  // Move to monday if necessary
  if($date->format('N') != '1') {
    $date->modify('monday');
    $date->modify('-1 week');
  }
  $daysthisweek = array();
  for($i = 0; $i < 7; $i++) {
    $daysthisweek[] = clone $date;
    $date->modify('+1 day');
  }
  $variables['daysthisweek'] = $daysthisweek;

  $date->modify('-2 weeks');
  $variables['previous_dateinweek'] = $date->format('Y-m-d');
  $date->modify('+2 weeks');
  $variables['next_dateinweek'] = $date->format('Y-m-d');
}

function tzintellitime_mock_compare_reports($first, $second) {
  return $first->get_begintime()->format('U') - $second->get_begintime()->format('U');
}

function tzintellitime_mock_request() {
  watchdog('mock', 'Request for path !path', array('!path' => $_SERVER['REQUEST_URI']));

  $path = arg();
  if(count($path) < 3 && FALSE !== strpos(end($path), '.aspx')) {
    array_splice($path, -1, 0, 'Portal');
    drupal_goto(implode('/', $path));
  }

  // handle image requests
  if(FALSE !== array_search('Images', $path)) {
    drupal_set_header('Content-Type: image/gif');
    print(base64_decode('R0lGODlhAQABAIABAP///wAAACH5BAEKAAEALAAAAAABAAEAAAICTAEAOw=='));
    return;
  }

  if(TZINTELLITIME_MOCK_ERROR_CODE !== '200') {
    drupal_set_header('HTTP/1.1 ' . TZINTELLITIME_MOCK_ERROR_CODE . ' Error');
    print('Error: ' . TZINTELLITIME_MOCK_ERROR_CODE);
    return;
  }

  switch(end($path)) {
    case 'Login.aspx':
      if('POST' === $_SERVER['REQUEST_METHOD']) {
        if(tzintellitime_mock_authenticate($_POST['TextBoxUserName'], $_POST['TextBoxPassword'])) {
          array_pop($path);
          $path[] = 'Main.aspx';
          drupal_goto(implode('/', $path));
        } else {
          drupal_goto('IntelliplanWeb/Portal/Login.aspx');
        }
      } else {
        readfile(dirname(__FILE__) . '/../tests/intellitime-login-page.html');
      }
      break;

    case 'Main.aspx':
      if (tzintellitime_mock_check_cookie()) {
        readfile(dirname(__FILE__) . '/../tests/intellitime-main-page.html');
      } else {
        drupal_goto('IntelliplanWeb/Portal/Login.aspx');
      }
      break;

    case 'TimeReport.aspx':
      if (tzintellitime_mock_check_cookie()) {
        if(TZINTELLITIME_MOCK_DELAY_MILLIS && ctype_digit(TZINTELLITIME_MOCK_DELAY_MILLIS)) {
          usleep(TZINTELLITIME_MOCK_DELAY_MILLIS * 1000);
        }
        if('POST' === $_SERVER['REQUEST_METHOD']) {
          if(!empty($_POST['AddDateDropDown']) || !empty($_POST['AddRowDropDown'])) {
            create_new_report_from_post($_POST);
          }

          $decodedobject = base64_decode($_POST['__VIEWSTATE']);
          $idarray = unserialize($decodedobject);

          foreach($idarray as $ctlid => $reportid) {
            tzintellitime_mock_update_report($_POST, $ctlid, $reportid);
          }
        }
        return '';
      } else {
        drupal_goto('IntelliplanWeb/Portal/Login.aspx');
      }
      break;

    case 'LogOut.aspx':
      tzintellitime_mock_logout();
      drupal_goto('IntelliplanWeb/Portal/Login.aspx');
      break;

    default:
      drupal_goto('IntelliplanWeb/Portal/Login.aspx');
      break;
  }
}

function tzintellitime_mock_update_report($post, $ctlid, $reportid) {
  // query to get the report and create a report with information that we cannot from $post
  if($post['OldRowsRepeater:_ctl' . $ctlid . ':CheckBoxDelete']) {
    db_query('DELETE FROM {tzintellitime_mock_data} WHERE id=%d', $reportid);
    return;
  }
  $report = tzintellitime_mock_load_object($reportid);

  if($report instanceof TZIntellitimeReport) {
    if(!empty($post['OldRowsRepeater:_ctl' . $ctlid . ':CheckboxDayDone'])) {
      $report->state = TZIntellitimeReport::STATE_REPORTED;
    } else {
      $report->state = TZIntellitimeReport::STATE_OPEN;
    }

    $report->begin = $post['OldRowsRepeater:_ctl' . $ctlid . ':TextboxTimeFrom'];
    $report->end = $post['OldRowsRepeater:_ctl' . $ctlid . ':TextboxTimeTo'];
    $report->break_duration_minutes = $post['OldRowsRepeater:_ctl' . $ctlid . ':TextboxBreak'];
    $report->comment = $post['OldRowsRepeater:_ctl' . $ctlid . ':TextboxNote'];
    tzintellitime_mock_store_object($report);
  }
}

function tzintellitime_mock_authenticate($user, $pass) {
  $mock_user = tzintellitime_mock_load_user($user);
  if(!empty($mock_user) && $mock_user->password === $pass) {
    $token = md5($user . microtime() . $pass);
    $_SESSION['tzintellitime_mock_cookie'] = $token;
    $_SESSION['tzintellitime_mock_user_id'] = $mock_user->user_id;
    // Set a session cookie specific for the mock.
    setcookie('tzintellitime_mock_cookie', $token, time() + 1800, '/IntelliplanWeb');
    return TRUE;
  }
  return FALSE;
}

/**
 * creates a TZIntellitimeReport object and saves it to our database.
 */
function create_new_report_from_post($post) {

  // Break out year, month and day from the date object.
  list($year, $month, $day) = explode('-', $post['AddDateDropDown']);

  $report = new TZIntellitimeReport();
  $report->user_id = $_SESSION['tzintellitime_mock_user_id'];
  $report->year = intval($year, 10);
  $report->month = intval($month, 10);
  $report->day = intval($day, 10);
  $report->begin = $post['AddTimeFromTextBox'];;
  $report->end = $post['AddTimeToTextBox'];
  $report->break_duration_minutes = $post['AddBreakTextBox'];

  // check if commentfield is activated
  if(!empty($post['AddNoteTextBox'])) {
    $report->comment = $post['AddNoteTextBox'];
  }
  if(!empty($post['AddRowDropDown'])) {
    $assignment = tzintellitime_mock_load_object($post['AddRowDropDown']);
    if(!empty($assignment) && $assignment instanceof TZIntellitimeAssignment) {
      $report->title = $assignment->title;
      $report->assignment_id = $assignment->id;
    } else {
      return;
    }
  }

  // Create and save report
  tzintellitime_mock_store_object($report);
}


function tzintellitime_mock_check_cookie() {
  if(!empty($_SESSION['tzintellitime_mock_cookie']) && !empty($_COOKIE['tzintellitime_mock_cookie']) &&
      $_SESSION['tzintellitime_mock_cookie'] == $_COOKIE['tzintellitime_mock_cookie']) {
    // Check that user_id exists
    $mock_user = tzintellitime_mock_load_user($_SESSION['tzintellitime_mock_user_id']);
    if(!empty($mock_user) && !empty($mock_user->login)) {
      // Set a session cookie specific for the mock.
      setcookie('tzintellitime_mock_cookie', $_SESSION['tzintellitime_mock_cookie'], time() + 1800, '/IntelliplanWeb');
      return TRUE;
    }
  }
  tzintellitime_mock_logout();
  return FALSE;
}

function tzintellitime_mock_logout() {
  // Unset both session and cookie
  unset($_SESSION['tzintellitime_mock_cookie']);
  unset($_SESSION['tzintellitime_mock_user_id']);
  setcookie('tzintellitime_mock_cookie', '', time() - 3600, '/IntelliplanWeb');
}


function tzintellitime_mock_get_reports($mock_user=NULL) {

  // Build SQL query
  $query = 'SELECT * FROM {tzintellitime_mock_data}';
  $query_args = array();
  if(!empty($mock_user)) {
    $query .= ' WHERE user_id = %d';
    $query_args[] = $mock_user->user_id;
  }
  $query .= ' ORDER BY id ASC';

  $reports = array();
  $result = db_query($query, $query_args);
  while($row = db_fetch_object($result)) {
    $object = unserialize($row->data);
    if($object instanceof TZIntellitimeReport) {
      $reports[] = _tzintellitime_mock_fill_id($object, $row);
    }
  }
  return $reports;
}

function tzintellitime_mock_get_assignments() {
  $assignments = array();

  $result = db_query('SELECT * FROM {tzintellitime_mock_data} WHERE user_id = 0 ORDER BY id ASC');
  while($row = db_fetch_object($result)) {
    $object = unserialize($row->data);
    if($object instanceof TZIntellitimeAssignment) {
      $assignments[] = _tzintellitime_mock_fill_id($object, $row);
    }
  }

  return $assignments;
}

function _tzintellitime_mock_fill_id(&$object, $row) {
  if($object) {
    $object->user_id = $row->user_id;
    $object->id = $row->id;
  }
  return $object;
}

function tzintellitime_mock_load_user($user_id) {
  if(is_numeric($user_id)) {
    return db_fetch_object(db_query('SELECT * FROM {tzintellitime_mock_users} WHERE user_id = %d', $user_id));
  } else {
    return db_fetch_object(db_query('SELECT * FROM {tzintellitime_mock_users} WHERE login = \'%s\'', $user_id));
  }
}

function tzintellitime_mock_store_object($object) {
  $db_object = array(
    'user_id' => 0,
    'data' => serialize($object),
  );

  if(!empty($object->user_id)) {
    $db_object['user_id'] = $object->user_id;
  }

  if(!empty($object->id)) {
    // Existing ID, update instead
    $db_object['id'] = $object->id;
    drupal_write_record('tzintellitime_mock_data', $db_object, 'id');
  } else {
    drupal_write_record('tzintellitime_mock_data', $db_object);
  }

  return $db_object['id'];
}

function tzintellitime_mock_load_object($id) {
  $result = db_query('SELECT * FROM {tzintellitime_mock_data} WHERE id = %d', $id);
  $row = db_fetch_object($result);
  $obj = unserialize($row->data);
  return _tzintellitime_mock_fill_id($obj, $row);
}
