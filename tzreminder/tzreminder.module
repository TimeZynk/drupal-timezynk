<?php


function tzreminder_menu() {
  $items['tzsms/reminder'] = array(
    'title' => 'Reminders',
    'access arguments' => array('configure reminders'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tzreminder_config_form'),
    'file' => 'includes/tzreminder.form.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implementation of hook_perm()
 * Define available permissions.
 */
function tzreminder_perm() {
  return array('configure reminders');
}

function tzreminder_cron() {
  $config = tzreminder_get_config();

  $now = tzbase_make_date();
  if (_tzreminder_is_in_quiet_period($config, $now)) {
    return;
  }
  if (!empty($config->delay_minutes)) {
    $delayPolicy = new TZDelayedReminderPolicy($config->delay_minutes);
    _tzreminder_run_policy($delayPolicy, $config, $now);
  }
  if (!empty($config->fixed_days)) {
    foreach($config->fixed_days as $day) {
      $fixedPolicy = new TZFixedDateReminderPolicy(intval($day,10), intval($config->fixed_hour));
      _tzreminder_run_policy($fixedPolicy, $config, $now);
    }
  }

  tzreminder_set_config($config);
}

function tzreminder_get_config() {
  $config = variable_get('tzreminder_config', new stdClass());
  return tzreminder_fill_default_config($config);
}

function tzreminder_set_config($config) {
  variable_set('tzreminder_config', $config);
}

function tzreminder_fill_default_config($config) {
  if(!isset($config->quiet_start)) {
    $config->quiet_start = '';
  }

  if(!isset($config->quiet_end)) {
    $config->quiet_end = '';
  }

  if(!isset($config->delay_user_policy)) {
    $config->delay_user_policy = 'include';
  }

  if(!isset($config->delay_user_list)) {
    $config->delay_user_list = array();
  }

  if(!isset($config->delay_minutes)) {
    $config->delay_minutes = '';
  }

  if(!isset($config->last_call)) {
    $config->last_call = array();
  }

  if(!isset($config->fixed_user_policy)) {
    $config->fixed_user_policy = 'include';
  }

  if(!isset($config->fixed_user_list)) {
    $config->fixed_user_list = array();
  }

  if (!isset($config->fixed_days)) {
    $config->fixed_days = array();
  }

  if (!isset($config->fixed_hour)) {
    $config->fixed_hour = '17';
  }

  return $config;
}

/**
 * Get a datetime object for the last time this user was sent a reminder
 * from the specified reminder policy
 * @param object $config config object
 * @param string $policy policy id
 * @param int $uid user ID
 * @return DateTime
 */
function _tzreminder_get_last_call($config, $policy, $uid) {
  $last_call = NULL;
  if(empty($config->last_call[$uid][$policy])) {
    $last_call = tzbase_make_date(0);
  } else {
    $last_call = tzbase_make_date($config->last_call[$uid][$policy]);
  }
  return $last_call;
}

function _tzreminder_is_in_quiet_period($config, $time) {
  if(!empty($config->quiet_start)) {
    $span = new TZTimeOfDaySpan($config->quiet_start, $config->quiet_end);
    return $span->isInsideSpan($time);
  }
  return FALSE;
}

function _tzreminder_send_reminder($policy, $now, $config, $uid, $count) {
  $account = user_load($uid);
  if(empty($account->tzuser['mobile'])) {
    return FALSE;
  }

  $last_call = _tzreminder_get_last_call($config, $policy->getName(), $uid);
  if(!$policy->shouldSendMessage($now, $last_call)) {
    return FALSE;
  }

  $message = $policy->getMessage($count);
  watchdog('tzreminder', 'Sending @policy_type reminder to @mobile',
      array(
        '@policy_type' => $policy->getName(),
        '@mobile' => $account->tzuser['mobile']
      ),
      WATCHDOG_INFO,
      theme('username', $account));
  tzsms_send(TZSMS_TYPE_AUTO_REMINDER_SMS, $account->tzuser['mobile'], $message);
  return TRUE;
}

function _tzreminder_run_policy($policy, $config, $now) {

  $query = $policy->getQuery($now);
  if(!$query) {
    return;
  }
  // Hacky, not sure this is safe..
  $user_policy = $policy->getName() . '_user_policy';
  $user_list = $policy->getName() . '_user_list';
  $userFilter = new TZUserFilter($config->$user_policy, $config->$user_list);

  $result = db_query($query->getQueryString(), $query->getQueryArgs());
  $reportCountForUser = array();
  while($tzreport = db_fetch_object($result)) {
    $uid = $tzreport->assignedto;
    if (!$userFilter->isIncluded($uid)) {
      continue;
    }

    if(!isset($reportCountForUser[$uid])) {
      $reportCountForUser[$uid] = 0;
    }
    $reportCountForUser[$uid]++;
  }

  foreach($reportCountForUser as $uid => $count) {
    if(_tzreminder_send_reminder($policy, $now, $config, $uid, $count)) {
      $config->last_call[$uid][$policy->getName()] = $now->format('U');
    }
  }
}