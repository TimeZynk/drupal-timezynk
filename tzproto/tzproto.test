<?php

/**
 * @file
 * TimeZynk protobuf tests
 */
class TZProtoTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'TZProto Test Suite',
      'description' => '',
      'group' => 'TZProto',
    );
  }

  private $admin_user = NULL;
  private $standard_user = NULL;



  public function setUp() {
    // Enable any modules required for the test.
   parent::setUp('tzbase', 'tzproto');
   tzbase_include_proto_classes();

   // Create test users
   $this->admin_user = $this->drupalCreateUser(array('create tzjob content', 'create tzreport content', 'edit own tzreport content', 'view own tzreport content', 'remove own tzreport content', 'view any tzjob content'));
   $this->standard_user = $this->drupalCreateUser(array('edit own tzreport content', 'view own tzreport content', 'view any tzjob content'));
  }

  public function tearDown() {
    parent::tearDown();
  }

  public function testOperations() {
    $tzuser = $this->doGetAdminUser();
    $jobid = $this->doCreateJob();
    $reportid = $this->doCreateReport($jobid);

    $stduser = $this->doGetStandardUser();
    $this->assertFalse($this->doCreateJob($this->standard_user));
    $reportid = $this->doCreateReport($jobid, TZFlags::CREATED, NULL, $this->standard_user);
    $this->assertFalse($reportid);
  }

  public function testGetDeletedReport() {
    $jobid = $this->doCreateJob();
    $reportid = $this->doCreateReport($jobid, TZFlags::DELETED);
    $reports = $this->doGetReports();
    $this->assertEqual(1, count($reports));
    $this->assertEqual(TZFlags::DELETED, $reports[0]->flags());
  }

  public function testDoNotGetDeletedReport() {
    $jobid = $this->doCreateJob();
    $reportid = $this->doCreateReport($jobid, TZFlags::DELETED);
    $reports = $this->doGetReports(TZFlags::LOCKED);
    $this->assertEqual(0, count($reports));
  }

  public function testGetReportsByMaxFlag() {
    $jobid = $this->doCreateJob();
    $this->doCreateReport($jobid, TZFlags::CREATED);
    $this->doCreateReport($jobid, TZFlags::SIGNED_IN);
    $this->doCreateReport($jobid, TZFlags::REPORTED);
    $this->doCreateReport($jobid, TZFlags::APPROVED);
    $this->doCreateReport($jobid, TZFlags::LOCKED);
    $this->doCreateReport($jobid, TZFlags::DELETED);

    $reported_or_less = $this->doGetReports(TZFlags::REPORTED);
    $this->assertEqual(3, count($reported_or_less));

    $locked_or_less = $this->doGetReports(TZFlags::LOCKED);
    $this->assertEqual(5, count($locked_or_less));
  }

  public function testGetReportsByDate() {
    $expectedBeginTime = 123456;
    $jobid = $this->doCreateJob();
    for ($i = 1; $i<11; $i++) {
      $this->doCreateReport($jobid, TZFlags::CREATED, $expectedBeginTime*$i);
    }

    $before7 = $this->doGetReports(NULL, $expectedBeginTime*7);
    $this->assertEqual(6, count($before7));

    $after_and_including_3 = $this->doGetReports(NULL, NULL, $expectedBeginTime*3);
    $this->assertEqual(8, count($after_and_including_3));
  }

  public function testGetReportsByDateAndFlags() {
    $flaglist = tzbase_tzreport_list_flags();
    $flagindices = array_keys($flaglist);
    $expectedBeginTime = 123456;
    $jobid = $this->doCreateJob();
    $reflection = new ReflectionClass('TZFlags');
    for ($i = 1; $i<11; $i++) {
      /* This should create reports with flags
       * 1      , 2        , 3       , 4       , 5     , 6      , 7      , 8        , 9       , 10
       * CREATED, SIGNED_IN, REPORTED, APPROVED, LOCKED, DELETED, CREATED, SIGNED_IN, REPORTED, APPROVED
       */
      $this->verbose($flaglist[$flagindices[($i-1)%count($flagindices)]]);
      $this->doCreateReport($jobid, $reflection->getConstant($flaglist[$flagindices[($i-1)%count($flagindices)]]), $expectedBeginTime*$i);
    }

    $before7 = $this->doGetReports(TZFlags::LOCKED, $expectedBeginTime*7);
    $this->assertEqual(5, count($before7));

    $after_and_including_3 = $this->doGetReports(TZFlags::REPORTED, NULL, $expectedBeginTime*3);
    $this->assertEqual(4, count($after_and_including_3));
  }


  public function doGetAdminUser() {
    $request = $this->createRequest($this->admin_user);
    $cmd = $request->add_command();
    $get_user_cmd = new TZGetUserCmd();
    $cmd->set_get_user_cmd($get_user_cmd);

    $response = $this->sendRequest($request);
    $this->assertEqual(1, $response->result_size());
    $result = $response->result(0);
    $tzuser = $result->user();

    $this->assertEqual($this->admin_user->uid, $tzuser->id());
    $this->assertEqual($this->admin_user->name, $tzuser->username());
    $this->assertTrue($tzuser->may_create_job(), 'Expect permission to create a job');
    return $tzuser;
  }

  public function doGetReports($max_flags = NULL, $before = NULL , $after = NULL) {
    $request = $this->createRequest($this->admin_user);
    $cmd = $request->add_command();
    $get_report_cmd = new TZGetReportCmd();
    if($max_flags != NULL) {
      $get_report_cmd->set_max_flag($max_flags);
    }
    if ($before != NULL) {
      $get_report_cmd->set_before($before);
    }
    if ($after != NULL) {
      $get_report_cmd->set_after($after);
    }
    $cmd->set_get_report_cmd($get_report_cmd);

    $response = $this->sendRequest($request);
    $this->assertEqual(1, $response->result_size());
    $result = $response->result(0);
    $reports = array();
    $get_report_result = $result->get_report_result();
    for ($i = 0; $i < $get_report_result->report_size(); $i++) {
      $reports[] = $get_report_result->report($i);
    }
    return $reports;
  }

  public function doGetStandardUser() {
    $request = $this->createRequest($this->standard_user);
    $cmd = $request->add_command();
    $get_user_cmd = new TZGetUserCmd();
    $cmd->set_get_user_cmd($get_user_cmd);

    $response = $this->sendRequest($request);
    $this->assertEqual(1, $response->result_size());
    $result = $response->result(0);
    $tzuser = $result->user();

    $this->assertEqual($this->standard_user->uid, $tzuser->id());
    $this->assertEqual($this->standard_user->name, $tzuser->username());
    $this->assertFalse($tzuser->may_create_job(), 'No permission to create a job');
    return $tzuser;
  }

  public function doCreateJob($account = NULL) {
    if($account == NULL) {
      $account = $this->admin_user;
    }

    $request = $this->createRequest($account);
    $cmd = $request->add_command();

    // Populate default tz job
    $job = new TZJob();
    $job->set_parent_id(0);
    $job->set_title('test job');

    $create_job_cmd = new TZCreateJobCmd();
    $create_job_cmd->set_new_job($job);
    $cmd->set_create_job_cmd($create_job_cmd);

    $response = $this->sendRequest($request);
    $this->assertEqual(1, $response->result_size());
    $result = $response->result(0);

    // Check for error
    if($result->error_code()) {
      $this->assertNotNull($result->error_msg());
      return FALSE;
    }

    $create_job_result = $result->create_job_result();
    $this->assertTrue($create_job_result->id(), 'Expect valid job id, got ' . $create_job_result->id());

    // Check against actual saved node
    $node = node_load($create_job_result->id(), NULL, TRUE);
    $this->assertEqual($job->title(), $node->title);
    $this->assertEqual($job->parent_id(), $node->parentid);

    return $create_job_result->id();
  }

  public function doCreateReport($jobid, $flags = TZFLags::CREATED, $begintime = NULL, $account = NULL) {
    if($account == NULL) {
      $account = $this->admin_user;
    }

    $request = $this->createRequest($account);
    $cmd = $request->add_command();

    // Populate default TZ report
    $report = new TZReport();
    $report->set_job_id($jobid);
    $report->set_assigned_to($this->admin_user->uid);

    if ($begintime == NULL) {
      $now = time();
      $begintime = $now - 3600*2;
    }
    $endtime = $begintime + 3600;
    $breakduration = 1800;

    $report->set_begin_time($begintime);
    $report->set_end_time($endtime);
    $report->set_break_duration($breakduration);
    $report->set_flags($flags);

    $create_report_cmd = new TZCreateReportCmd();
    $create_report_cmd->set_new_report($report);
    $cmd->set_create_report_cmd($create_report_cmd);

    $response = $this->sendRequest($request);
    $this->assertEqual(1, $response->result_size());
    $result = $response->result(0);

    // Check for error
    if($result->error_code()) {
      $this->assertNotNull($result->error_msg());
      return FALSE;
    }

    $create_report_result = $result->create_report_result();
    $this->assertTrue($create_report_result->id(), 'Expected valid report id, got ' . $create_report_result->id());

    // Load node and check results
    $node = node_load($create_report_result->id(), NULL, TRUE);
    $this->assertEqual($begintime, $node->begintime);
    $this->assertEqual($endtime, $node->endtime);
    $this->assertEqual($breakduration, $node->breakduration);

    return $create_report_result->id();
  }

  private function createRequest($user) {
    $request = new TZRequest();
    $request->set_username($user->name);
    $request->set_password($user->pass_raw);
    return $request;
  }

  /**
   * Post TZProto request
   * @param TZRequest $request
   */
  private function sendRequest($request) {
    $request_data = $request->SerializeToString();

    $out = $this->curlExec(array(
      CURLOPT_URL => url('tzproto', array('absolute' => TRUE)),
      CURLOPT_POST => TRUE,
      CURLOPT_POSTFIELDS => $request_data,
    ));

    $response = NULL;
    if($this->assertResponse(200)) {
      $response = new TZResponse();
      $response->parseFromString($out);
    }
    return $response;
  }

  /** Override assertEqual to get nice log prints by default */
  protected function assertEqual($first, $second, $message = '', $group = 'Other') {
    if(!$message) {
      $message = 'Expected "' . $first . '", got "' . $second . '"';
    }
    parent::assertEqual($first, $second, $message, $group);
  }
}