<?php

/**
 * @file
 * TimeZynk protobuf tests
 */
class TZProtoTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'TZProto Test Suite',
      'description' => '',
      'group' => 'TZProto',
    );
  }

  private $admin_user = NULL;
  private $standard_user = NULL;

  public function setUp() {
    // Enable any modules required for the test.
   parent::setUp('libraries', 'date_api', 'date_timezone', 'tzuser', 'tzbase', 'tzproto');
   variable_set('date_default_timezone_name', 'Europe/Stockholm');
   tzbase_include_proto_classes();
   require_once dirname(__FILE__) . '/tzproto.request.inc';

   // Create test users
   $this->admin_user = $this->drupalCreateUser(array('create tzjob content',
                                                    'create tzreport content',
                                                    'edit own tzreport content',
                                                    'view own tzreport content',
                                                    'remove own tzreport content',
                                                    'view any tzjob content',
                                                    'view own availability content',
                                                    'create availability content',
                                                    'remove own availability content',
                                                    'create tzreport on any tzjob',
   ));
   $this->admin_user2 = $this->drupalCreateUser(array('create tzjob content',
                                                     'create tzreport content',
                                                     'edit own tzreport content',
                                                     'view own tzreport content',
                                                     'remove own tzreport content',
                                                     'view any tzjob content',
                                                     'view own availability content',
                                                     'create availability content',
                                                     'remove own availability content',
                                                     'create tzreport on any tzjob',
   ));
   $this->standard_user = $this->drupalCreateUser(array('edit own tzreport content', 'view own tzreport content', 'view any tzjob content'));
  }

  public function tearDown() {
    parent::tearDown();
  }

  public function testOperations() {
    $tzuser = $this->doGetAdminUser();
    $jobid = $this->doCreateJob();
    $reportid = $this->doCreateReport($jobid);

    $stduser = $this->doGetStandardUser();
    $this->assertFalse($this->doCreateJob($this->standard_user));
    $reportid = $this->doCreateReport($jobid, TZFlags::CREATED, NULL, $this->standard_user);
    $this->assertFalse($reportid);
  }

  public function testGetDeletedReport() {
    $jobid = $this->doCreateJob();
    $reportid = $this->doCreateReport($jobid, TZFlags::DELETED);
    $reports = $this->doGetReports();
    $this->assertEqual(1, count($reports));
    $this->assertEqual(TZFlags::DELETED, $reports[0]->flags());
  }

  public function testDoNotGetDeletedReport() {
    $jobid = $this->doCreateJob();
    $reportid = $this->doCreateReport($jobid, TZFlags::DELETED);
    $reports = $this->doGetReports(TZFlags::LOCKED);
    $this->assertEqual(0, count($reports));
  }

  public function testGetReportsByMaxFlag() {
    $jobid = $this->doCreateJob();
    $this->doCreateReport($jobid, TZFlags::CREATED);
    $this->doCreateReport($jobid, TZFlags::SIGNED_IN);
    $this->doCreateReport($jobid, TZFlags::REPORTED);
    $this->doCreateReport($jobid, TZFlags::APPROVED);
    $this->doCreateReport($jobid, TZFlags::LOCKED);
    $this->doCreateReport($jobid, TZFlags::DELETED);

    $reported_or_less = $this->doGetReports(TZFlags::REPORTED);
    $this->assertEqual(3, count($reported_or_less));

    $locked_or_less = $this->doGetReports(TZFlags::LOCKED);
    $this->assertEqual(5, count($locked_or_less));
  }

  public function testGetReportsByDateDeprecatedVersion() {
    $expectedBeginTime = 123456;
    $jobid = $this->doCreateJob();
    for ($i = 1; $i<11; $i++) {
      $this->doCreateReport($jobid, TZFlags::CREATED, $expectedBeginTime*$i);
    }

    $before7 = $this->doGetReports(NULL, $expectedBeginTime*7);
    $this->assertEqual(6, count($before7));

    $after_and_including_3 = $this->doGetReports(NULL, NULL, $expectedBeginTime*3);
    $this->assertEqual(8, count($after_and_including_3));
  }

  public function testGetReportsByDate() {

    $start = $this->createTZTime(0, 0);
    $end = $this->createTZTime(23, 59);

    $jobid = $this->doCreateJob();

    $expected_time_spans = array();

    for ($i = 1; $i<11; $i++) {
      $date = $this->createTZDate(2010, 9, $i);

      $time_span = new TZTimeSpan();
      $time_span->set_start($start);
      $time_span->set_end($end);
      $time_span->set_date($date);
      $expected_time_spans[$i] = $time_span;
      $this->doCreateReportTimeSpan($jobid, TZFlags::CREATED, $time_span);
    }

    $date_range = new TZDateRange();
    // All reports up to and including 2010-09-07 23:59
    $date_range->set_end($expected_time_spans[7]->date());
    $reports = $this->doGetReportsByDateRange(NULL, $date_range);
    $this->assertEqual(7, count($reports));

    $date_range = new TZDateRange();
    // All reports after and including 2010-09-03 00:00
    $date_range->set_start($expected_time_spans[3]->date());
    $reports = $this->doGetReportsByDateRange(NULL, $date_range);
    $this->assertEqual(8, count($reports));

    // Double ended range, all reports including end points between
    // 2010-09-03 00:00 and 2010-09-07 23:59
    $date_range->set_end($expected_time_spans[7]->date());
    $reports = $this->doGetReportsByDateRange(NULL, $date_range);
    $this->assertEqual(5, count($reports));
  }

  public function testProtocolVersion1ReturnsReportsWithWorkedTime() {

    $start = $this->createTZTime(22, 5);
    $end = $this->createTZTime(4, 30);

    $jobid = $this->doCreateJob();

    $date = $this->createTZDate(2010, 9, 15);

    $time_span = new TZTimeSpan();
    $time_span->set_start($start);
    $time_span->set_end($end);
    $time_span->set_date($date);
    $this->doCreateReportTimeSpan($jobid, TZFlags::CREATED, $time_span);


    // Double ended range, all reports including end points between
    // 2010-09-15 00:00 and 2010-09-15 23:59
    $date_range = new TZDateRange();
    $date_range->set_start($date);
    $date_range->set_end($date);
    $reports = $this->doGetReportsByDateRange(NULL, $date_range);
    $this->assertEqual(1, count($reports));
    $worked_time = $reports[0]->worked_time();
    $this->assertEqual($date->year(), $worked_time->date()->year());
    $this->assertEqual($date->month(), $worked_time->date()->month());
    $this->assertEqual($date->day(), $worked_time->date()->day());

    $this->assertEqual($start->hour(), $worked_time->start()->hour());
    $this->assertEqual($start->minute(), $worked_time->start()->minute());

    $this->assertEqual($end->hour(), $worked_time->end()->hour());
    $this->assertEqual($end->minute(), $worked_time->end()->minute());
  }

  public function testGetReportsByDateAndFlags() {
    $flaglist = tzbase_tzreport_list_flags();
    $flagindices = array_keys($flaglist);
    $expectedBeginTime = 123456;
    $jobid = $this->doCreateJob();
    $reflection = new ReflectionClass('TZFlags');
    for ($i = 1; $i<11; $i++) {
      // This should create reports with flags
      // 1      , 2        , 3       , 4       , 5     , 6      , 7      , 8        , 9       , 10
      // CREATED, SIGNED_IN, REPORTED, APPROVED, LOCKED, DELETED, CREATED, SIGNED_IN, REPORTED, APPROVED

      $this->doCreateReport($jobid, $reflection->getConstant($flaglist[$flagindices[($i-1)%count($flagindices)]]), $expectedBeginTime*$i);
    }

    $before7 = $this->doGetReports(TZFlags::LOCKED, $expectedBeginTime*7);
    $this->assertEqual(5, count($before7));

    $after_and_including_3 = $this->doGetReports(TZFlags::REPORTED, NULL, $expectedBeginTime*3);
    $this->assertEqual(4, count($after_and_including_3));
  }

  public function testSaveReportThatSpansMidnightProtoV1() {
    $job_id = $this->doCreateJob();
    $start = $this->createTZTime(22,40);
    $end = $this->createTZTime(8,0);
    $date = $this->createTZDate(2011,5,25);
    $time_span = new TZTimeSpan();
    $time_span->set_start($start);
    $time_span->set_end($end);
    $time_span->set_date($date);
    $report_id = $this->doCreateReportTimeSpan($job_id, TZFlags::CREATED, $time_span);
    $this->assertTrue($report_id);
    $node = node_load($report_id, NULL, TRUE);
    $this->assertNotNull($node);
    $this->assertTrue($node->begintime < $node->endtime);
    $this->assertEqual(8*3600+50*60, $node->totalduration);
  }

  public function testSaveReportThatIncorrectlySpansMidnightProtoV0() {
    $job_id = $this->doCreateJob();
    $begintime = date_make_date('2011-05-25 22:40')->format('U');
    $endtime = date_make_date('2011-05-25 08:00')->format('U');

    $report_id = $this->doCreateReport($job_id, TZFlags::CREATED, $begintime, NULL, $endtime);
    $this->assertFalse($report_id);
  }

  public function testShouldReturnCreatedAvailability() {
    $expected_id = $this->doCreateAvailability(TZAvailabilityType::AVAILABLE, date_make_date('2011-05-22T08:00'));
    $this->assertTrue($expected_id);

    $date_range = new TZDateRange();
    $date_range->set_start($this->createTZDate(2011, 5, 22));
    $date_range->set_end($this->createTZDate(2011, 5, 22));
    $availability = $this->doGetAvailabilityByDateRange($date_range);
    $this->assertEqual(1, count($availability));
    $this->assertEqual($expected_id, $availability[0]->id());
  }

  public function testCannotCreateAvailabilityIfNotPermitted() {
    $user = $this->drupalCreateUser(array('create tzjob content',
                                         'create tzreport content',
                                         'edit own tzreport content',
                                         'view own tzreport content',
                                         'remove own tzreport content',
                                         'view any tzjob content',
                                         'view own availability content',
                                         'remove own availability content'));
    $expected_id = $this->doCreateAvailability(TZAvailabilityType::AVAILABLE,
                                               date_make_date('2011-05-22T08:00'),
                                               $user);
    $this->assertFalse($expected_id);
  }


  public function testShouldNotReturnDeletedAvailability() {
    $expected_id = $this->doCreateAvailability(TZAvailabilityType::AVAILABLE, date_make_date('2011-05-22T08:00'));
    $this->assertTrue($expected_id);

    $deleted = $this->doDeleteAvailability($expected_id);
    $this->assertTrue($deleted);

    $date_range = new TZDateRange();
    $date_range->set_start($this->createTZDate(2011, 5, 22));
    $date_range->set_end($this->createTZDate(2011, 5, 22));
    $availability = $this->doGetAvailabilityByDateRange($date_range);
    $this->assertEqual(0, count($availability));
  }

  public function testCannotDeleteAvailabilityIfNotPermitted() {
    $user = $this->drupalCreateUser(array('create tzjob content',
                                         'create tzreport content',
                                         'edit own tzreport content',
                                         'view own tzreport content',
                                         'remove own tzreport content',
                                         'view any tzjob content',
                                         'view own availability content',
                                         'create availability content',));
    $expected_id = $this->doCreateAvailability(TZAvailabilityType::AVAILABLE,
                                               date_make_date('2011-05-22T08:00'),
                                               $user);
    $deleted = $this->doDeleteAvailability($expected_id, $user);
    $this->assertFalse($deleted);
  }

  public function testCannotDeleteOtherUsersAvailability() {
    $expected_id = $this->doCreateAvailability(TZAvailabilityType::AVAILABLE, date_make_date('2011-05-22T08:00'));
    $this->assertTrue($expected_id);

    $deleted = $this->doDeleteAvailability($expected_id, $this->admin_user2);
    $this->assertFalse($deleted);

    $date_range = new TZDateRange();
    $date_range->set_start($this->createTZDate(2011, 5, 22));
    $date_range->set_end($this->createTZDate(2011, 5, 22));
    $availability = $this->doGetAvailabilityByDateRange($date_range);
    $this->assertEqual(1, count($availability));
    $this->assertEqual($expected_id, $availability[0]->id());
  }

  public function testShouldOnlyReturnAvailabilityInDateRange() {
    $expected_ids = array();
    for ($day = 1; $day < 22; $day++) {
      $date_string = sprintf('2011-05-%02dT08:00', $day);
      $expected_ids[] = $this->doCreateAvailability(TZAvailabilityType::AVAILABLE, date_make_date($date_string));
    }

    $date_range = new TZDateRange();
    $date_range->set_start($this->createTZDate(2011, 5, 10));
    $date_range->set_end($this->createTZDate(2011, 5, 20));
    $availability = $this->doGetAvailabilityByDateRange($date_range);
    $this->assertEqual(11, count($availability));
    foreach ($availability as $a) {
      $this->assertTrue(FALSE !== array_search($a->id(), $expected_ids));
    }
  }

  public function doGetAdminUser() {
    $request = $this->createRequest($this->admin_user);
    $cmd = $request->add_command();
    $get_user_cmd = new TZGetUserCmd();
    $cmd->set_get_user_cmd($get_user_cmd);

    $response = $this->sendRequest($request);
    $this->assertEqual(1, $response->results_size());
    $result = $response->result(0);
    $tzuser = $result->user();

    $this->assertEqual($this->admin_user->uid, $tzuser->id());
    $this->assertEqual($this->admin_user->name, $tzuser->username());
    $this->assertTrue($tzuser->may_create_job(), 'Expect permission to create a job');
    return $tzuser;
  }

  public function doGetReports($max_flags = NULL, $before = NULL , $after = NULL) {
    $request = $this->createRequest($this->admin_user);
    $cmd = $request->add_command();
    $get_report_cmd = new TZGetReportCmd();
    if($max_flags != NULL) {
      $get_report_cmd->set_max_flag($max_flags);
    }
    if ($before != NULL) {
      $get_report_cmd->set_before($before);
    }
    if ($after != NULL) {
      $get_report_cmd->set_after($after);
    }
    $cmd->set_get_report_cmd($get_report_cmd);

    $response = $this->sendRequest($request);
    $this->assertEqual(1, $response->results_size());
    $result = $response->result(0);
    $reports = array();
    $get_report_result = $result->get_report_result();
    for ($i = 0; $i < $get_report_result->reports_size(); $i++) {
      $reports[] = $get_report_result->report($i);
    }
    return $reports;
  }

  public function doGetReportsByDateRange($max_flags = NULL, $date_range = NULL) {
    $request = $this->createRequest($this->admin_user);
    $cmd = $request->add_command();
    $get_report_cmd = new TZGetReportCmd();
    if($max_flags != NULL) {
      $get_report_cmd->set_max_flag($max_flags);
    }

    if (NULL == $date_range) {
      $date_range = new TZDateRange();
    }
    $get_report_cmd->set_date_range($date_range);
    $cmd->set_get_report_cmd($get_report_cmd);

    $response = $this->sendRequest($request, TZConstants::VERSION);
    $this->assertEqual(1, $response->results_size());
    $result = $response->result(0);
    $reports = array();
    $get_report_result = $result->get_report_result();
    for ($i = 0; $i < $get_report_result->reports_size(); $i++) {
      $reports[] = $get_report_result->report($i);
    }
    return $reports;
  }

  public function doGetAvailabilityByDateRange($date_range = NULL) {
    $request = $this->createRequest($this->admin_user);
    $cmd = $request->add_command();
    $get_availability_cmd = new TZGetAvailabilityCmd();

    if (NULL == $date_range) {
      $date_range = new TZDateRange();
    }
    $get_availability_cmd->set_date_range($date_range);
    $cmd->set_get_availability_cmd($get_availability_cmd);

    $response = $this->sendRequest($request, TZConstants::VERSION);
    $this->assertEqual(1, $response->results_size());

    $result = $response->result(0);
    $get_availability_result = $result->get_availability_result();
    $this->assertNotNull($get_availability_result);

    $availability = array();
    for ($i = 0; $i < $get_availability_result->availabilitys_size(); $i++) {
      $availability[] = $get_availability_result->availability($i);
    }
    return $availability;
  }

  public function doCreateAvailability($type = TZAvailabilityType::AVAILABLE, $start_date = NULL, $account = NULL) {
    if($account == NULL) {
      $account = $this->admin_user;
    }

    $request = $this->createRequest($account);
    $cmd = $request->add_command();

    // Populate default TZ report
    $availability = new TZAvailability();

    $availability->set_type($type);

    if ($start_date == NULL) {
      $start_date = tzbase_make_date(time() - 3600*2);
    }

    $end_date = clone($start_date);
    $end_date->modify('+4 hours');
    $time_span = new TZTimeSpan();
    $time_span->set_date($this->create_tzdate($start_date));
    $time_span->set_start($this->create_tztime($start_date));
    $time_span->set_end($this->create_tztime($end_date));
    $availability->set_time_span($time_span);

    $save_availability_cmd = new TZSaveAvailabilityCmd();
    $save_availability_cmd->set_availability($availability);
    $cmd->set_save_availability_cmd($save_availability_cmd);

    $response = $this->sendRequest($request, TZConstants::VERSION);
    $this->assertEqual(1, $response->results_size());
    $result = $response->result(0);

    // Check for error
    if($result->error_code()) {
      $this->assertNotNull($result->error_msg());
      return FALSE;
    }

    $save_availability_result = $result->save_availability_result();
    $this->assertTrue($save_availability_result->id(), 'Expected valid id, got ' . $save_availability_result->id());

    return $save_availability_result->id();
  }

  public function doDeleteAvailability($id, $account = NULL) {
    if($account == NULL) {
      $account = $this->admin_user;
    }

    $request = $this->createRequest($account);
    $cmd = $request->add_command();

    $delete_availability_cmd = new TZDeleteAvailabilityCmd();
    $delete_availability_cmd->set_id($id);
    $cmd->set_delete_availability_cmd($delete_availability_cmd);

    $response = $this->sendRequest($request, TZConstants::VERSION);
    $this->assertEqual(1, $response->results_size());
    $result = $response->result(0);

    // Check for error
    if($result->error_code()) {
      $this->assertNotNull($result->error_msg());
      return FALSE;
    }

    return TRUE;
  }

  public function doGetStandardUser() {
    $request = $this->createRequest($this->standard_user);
    $cmd = $request->add_command();
    $get_user_cmd = new TZGetUserCmd();
    $cmd->set_get_user_cmd($get_user_cmd);

    $response = $this->sendRequest($request, TZConstants::VERSION);
    $this->assertEqual(1, $response->results_size());
    $result = $response->result(0);
    $tzuser = $result->user();

    $this->assertEqual($this->standard_user->uid, $tzuser->id());
    $this->assertEqual($this->standard_user->name, $tzuser->username());
    $this->assertFalse($tzuser->may_create_job(), 'No permission to create a job');
    return $tzuser;
  }

  public function doCreateJob($account = NULL) {
    if($account == NULL) {
      $account = $this->admin_user;
    }

    $request = $this->createRequest($account);
    $cmd = $request->add_command();

    // Populate default tz job
    $job = new TZJob();
    $job->set_parent_id(0);
    $job->set_title('test job');

    $create_job_cmd = new TZCreateJobCmd();
    $create_job_cmd->set_new_job($job);
    $cmd->set_create_job_cmd($create_job_cmd);

    $response = $this->sendRequest($request);
    $this->assertEqual(1, $response->results_size());
    $result = $response->result(0);

    // Check for error
    if($result->error_code()) {
      $this->assertNotNull($result->error_msg());
      return FALSE;
    }

    $create_job_result = $result->create_job_result();
    $this->assertTrue($create_job_result->id(), 'Expect valid job id, got ' . $create_job_result->id());

    // Check against actual saved node
    $node = node_load($create_job_result->id(), NULL, TRUE);
    $this->assertEqual($job->title(), $node->title);
    $this->assertEqual($job->parent_id(), $node->parentid);

    return $create_job_result->id();
  }

  public function doCreateReport($jobid, $flags = TZFLags::CREATED, $begintime = NULL, $account = NULL, $endtime = NULL) {
    if($account == NULL) {
      $account = $this->admin_user;
    }

    $request = $this->createRequest($account);
    $cmd = $request->add_command();

    // Populate default TZ report
    $report = new TZReport();
    $report->set_job_id($jobid);
    $report->set_assigned_to($this->admin_user->uid);

    if ($begintime == NULL) {
      $now = time();
      $begintime = $now - 3600*2;
    }
    if ($endtime == NULL) {
      $endtime = $begintime + 3600;
    }
    $breakduration = 1800;

    $report->set_begin_time($begintime);
    $report->set_end_time($endtime);
    $report->set_break_duration($breakduration);
    $report->set_flags($flags);

    $create_report_cmd = new TZCreateReportCmd();
    $create_report_cmd->set_new_report($report);
    $cmd->set_create_report_cmd($create_report_cmd);

    $response = $this->sendRequest($request);
    $this->assertEqual(1, $response->results_size());
    $result = $response->result(0);

    // Check for error
    if($result->error_code()) {
      $this->assertNotNull($result->error_msg(), $result->error_msg());
      return FALSE;
    }

    $create_report_result = $result->create_report_result();
    $this->assertTrue($create_report_result->id(), 'Expected valid report id, got ' . $create_report_result->id());

    // Load node and check results
    $node = node_load($create_report_result->id(), NULL, TRUE);
    $this->assertEqual($begintime, $node->begintime);
    $this->assertEqual($endtime, $node->endtime);
    $this->assertEqual($breakduration, $node->breakduration);

    return $create_report_result->id();
  }

public function doCreateReportTimeSpan($jobid, $flags = TZFLags::CREATED, $time_span = NULL, $account = NULL) {
    if($account == NULL) {
      $account = $this->admin_user;
    }

    $request = $this->createRequest($account);
    $cmd = $request->add_command();

    // Populate default TZ report
    $report = new TZReport();
    $report->set_job_id($jobid);
    $report->set_assigned_to($this->admin_user->uid);

    if ($time_span == NULL) {
      $now = time();

      $begin = tzbase_make_date($now - 3600*2);
      $end = clone($begin);
      $end->modify('+1 hour');
      $time_span = new TZTimeSpan();
      $time_span->set_date($this->create_tzdate($begin));
      $time_span->set_start($this->create_tztime($begin));
      $time_span->set_end($this->create_tztime($end));
    }

    $report->set_worked_time($time_span);
    $breakduration = 1800;

    $report->set_break_duration($breakduration);
    $report->set_flags($flags);

    $create_report_cmd = new TZCreateReportCmd();
    $create_report_cmd->set_new_report($report);
    $cmd->set_create_report_cmd($create_report_cmd);

    $response = $this->sendRequest($request, TZConstants::VERSION);
    $this->assertEqual(1, $response->results_size());
    $result = $response->result(0);

    // Check for error
    if($result->error_code()) {
      $this->assertNotNull($result->error_msg());
      return FALSE;
    }

    $create_report_result = $result->create_report_result();
    $this->assertTrue($create_report_result->id(), 'Expected valid report id, got ' . $create_report_result->id());

    // Load node and check results
    $node = node_load($create_report_result->id(), NULL, TRUE);

    $expected_begin = $this->create_datetime($time_span->date(), $time_span->start());
    $expected_end = $this->create_datetime($time_span->date(), $time_span->end());
    if ($expected_end < $expected_begin) {
      $expected_end->modify('+1 day');
    }
    $this->assertEqual($expected_begin->format('U'), $node->begintime);
    $this->assertEqual($expected_end->format('U'), $node->endtime);
    $this->assertEqual($breakduration, $node->breakduration);

    return $create_report_result->id();
  }

  private function createRequest($user) {
    $request = new TZRequest();
    $request->set_username($user->name);
    $request->set_password($user->pass_raw);
    return $request;
  }

  /**
   * Post TZProto request
   * @param TZRequest $request
   */
  private function sendRequest($request, $protocol_version = 0) {
    $request_data = $request->SerializeToString();

    $url = 'tzproto/';
    if ($protocol_version > 0) {
      $url .= $protocol_version;
    }

    $out = $this->curlExec(array(
      CURLOPT_URL => url($url, array('absolute' => TRUE)),
      CURLOPT_POST => TRUE,
      CURLOPT_POSTFIELDS => $request_data,
    ));

    $response = new TZResponse();
    if($this->assertResponse(200)) {
      $response->parseFromString($out);
    }
    return $response;
  }

  /** Override assertEqual to get nice log prints by default */
  protected function assertEqual($first, $second, $message = '', $group = 'Other') {
    if(!$message) {
      $message = 'Expected "' . $first . '", got "' . $second . '"';
    }
    parent::assertEqual($first, $second, $message, $group);
  }

  private function createTZDate($year, $month, $day) {
    $date = new TZDate();
    $date->set_year($year);
    $date->set_month($month);
    $date->set_day($day);
    return $date;
  }

  private function createTZTime($hour, $minute) {
    $time = new TZTime();
    $time->set_hour($hour);
    $time->set_minute($minute);
    return $time;
  }

  private function create_tzdate($datetime) {
    $date = new TZDate();
    $date->set_year(intval($datetime->format('Y'), 10));
    $date->set_month(intval($datetime->format('n'), 10)); // Month w.o. leading zeroes.
    $date->set_day(intval($datetime->format('j'), 10)); // Day w.o. leading zeroes.
    return $date;
  }


  private function create_tztime($datetime) {
    $time = new TZTime();
    $time->set_hour(intval($datetime->format('G'), 10));
    $time->set_minute(intval($datetime->format('i'), 10));
    return $time;
  }

  private function create_datetime($tzdate, $tztime) {
    $datetime = NULL;

    $year = $tzdate->year();
    $month = $tzdate->month();
    $day = $tzdate->day();
    $hour = $tztime->hour();
    $minute = $tztime->minute();

    if (!empty($year) && !empty($month) && !empty($day) &&
    $hour !== NULL && $minute !== NULL ) {
      $datetime = new DateTime();
      $datetime->setTimezone(date_default_timezone(FALSE));
      $datetime->setDate($year, $month, $day);
      $datetime->setTime($hour, $minute);
    }
    return $datetime;
  }
}
