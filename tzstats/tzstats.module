<?php

define('TIMEZYNK_DAY_PRICE', variable_get('timezynk_day_price', 5));
define('TIMEZYNK_MONTH_PRICE', variable_get('timezynk_month_price', 50));
define('TIMEZYNK_AVAILABILITY_PRICE', variable_get('timezynk_availability_price', 10));
define('TIMEZYNK_SMS_PRICE', variable_get('timezynk_sms_price', 1));
define('TIMEZYNK_MINIMUM_MONTH_USERS', variable_get('timezynk_minimum_month_users', 0));
define('TIMEZYNK_MINIMUM_MONTH_USERS_START_DATE', variable_get('timezynk_minimum_month_users_start_date', ''));
define('TIMEZYNK_EXCLUDED_USERS', variable_get('timezynk_excluded_users', ''));
define('TIMEZYNK_TZSTATS_API_KEY', 'NRxbqRYscRnjSW7dPiOFOFeRMAQsSECkb8tsnml9NROT0nSGXGDqYLDnAEheL2cN');

function tzstats_menu() {
  $items['admin/reports/invoice'] = array(
    'title' => 'Invoice',
    'title callback' => 't',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'tzstats_invoice_page',
    'file' => 'includes/tzstats.invoice.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/reports/failed_login'] = array(
    'title' => 'Failed logins',
    'title callback' => 't',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'tzstats_failed_login_page',
  	'file' => 'includes/tzstats.failed_login.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/settings/timezynk/pricing'] = array(
    'title' => 'Pricing',
    'description' => 'Customer pricing levels',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tzstats_administer_pricing'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/tzstats.pricing.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/reports/user_stats.json'] = array(
    'title' => 'User Stats (JSON)',
    'page callback' => 'tzstats_user_stats_json',
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/tzstats.user_stats.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function tzstats_theme() {
  return array(
  	'money' => array(
  	  'arguments' => array('amount' => NULL),
  	),
  	'days' => array(
  	  'arguments' => array('count' => NULL),
  	),
  );
}

function theme_money($amount) {
  return sprintf('%.02f SEK', $amount);
}

function theme_days($count) {
  return sprintf('%d days', $count);
}

/**
 * Implements hook_tzsms_send.
 * Logs sms sending to the statistics database
 */
function tzstats_tzsms_send($type, $phonenbr, $length) {
  global $user;
  $record = array(
    'uid' => $user->uid,
    'timestamp' => time(),
    'sms_type' => $type,
    'destination' => $phonenbr,
    'length' => $length,
  );
  drupal_write_record('tzstats_sms', $record);
}

/**
 * Implements hook_tzproto_saved_report
 * Logs the saved report timestamp for billing statistics
 */
function tzstats_tzproto_saved_report($report) {
  $record = array(
    'uid' => $report->assignedto,
    'timestamp' => time(),
    'vid' => $report->vid,
  );
  drupal_write_record('tzstats_report', $record);
}

function tzstats_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'login') {
    $record = array(
      'uid' => $account->uid,
      'timestamp' => time(),
    );
    drupal_write_record('tzstats_login', $record);
  }
}

function tzstats_synchronized_multiple_users($module, $count, $successful, $before, $after) {
  watchdog('tzstats', 'Synchronized !successful/!count users in !seconds seconds using @module',
    array(
      '@module' => $module,
      '!successful' => $successful,
      '!count' => $count,
      '!seconds' => ($after - $before),
    )
  );
  $record = array(
    'module' => $module,
    'count' => $count,
    'successful' => $successful,
    'seconds' => ($after - $before),
    'timestamp' => time(),
  );
  drupal_write_record('tzstats_sync', $record);
}

/**
 * Implementation of hook_db_write_record_tzavailability
 * Store stats about writing availability to enable invoicing.
 */
function tzstats_db_write_record_tzavailability($record) {
  if (empty($record->id)) {
    // Only log creation of new availability
    $stats = array(
      'uid' => $record->uid,
      'timestamp' => time(),
    );
    drupal_write_record('tzstats_availability', $stats);
  }
}

function tzstats_cron() {
  $date = date_make_date('now');
  if ($date->format('H') != "23") {
    return;
  }

  watchdog('tzstats', 'Recording user stats');
  require_once(dirname(__FILE__) . '/includes/tzstats.user.inc');
  tzstats_record_user_status();
  tzstats_clean_sync_stats();
}

/**
 * Implementation of hook_views_api.
 * The rest of the hooks are in tzstats.views.inc
 */
function tzstats_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'tzstats') . '/includes',
  );
}

function tzstats_clean_sync_stats() {
  db_query(
      "DELETE sync FROM {tzstats_sync} sync ".
      "LEFT JOIN ( " .
        "SELECT id FROM {tzstats_sync} ORDER BY id DESC LIMIT 1000 " .
      ") latest ON sync.id = latest.id " .
      "WHERE latest.id IS NULL"
  );
  watchdog('tzstats', 'Cleared !count rows from tzsync_stats', array('!count' => db_affected_rows()));
}

/**
 * Implementation of hook_date_api_fields().
 *
 * Registers the timestamp field so the date can be used by
 * the Date API views date argument and date filter.
 */
function tzstats_date_api_fields($field) {
  if($field == 'tzstats_sync.timestamp') {
    return array(
      // The type of date: DATE_UNIX, DATE_ISO, DATE_DATETIME.
      'sql_type' => DATE_UNIX,
      // Timezone handling options: 'none', 'site', 'date', 'utc'.
      'tz_handling' => 'site',
      // Needed only for dates that use 'date' tz_handling.
      'timezone_field' => '',
      // Needed only for dates that use 'date' tz_handling.
      'offset_field' => '',
      // Array of "table.field" values for related fields that should be
      // loaded automatically in the Views SQL.
      'related_fields' => array(),
      // Granularity of this date field's db data.
      'granularity' => array('year', 'month', 'day', 'hour', 'minute', 'second'),
    );
  }
}

/**
 * Record a failed login and the user agent conveying the login.
 * Enter description here ...
 * @param string $username
 * @param string $user_agent
 */
function tzstats_tzproto_login_failed($username, $user_agent) {
  $record = array(
    'name' => $username,
  	'user_agent' => $user_agent,
  	'timestamp' => time(),
  );
  drupal_write_record('tzstats_failed_login', $record);
}

function tzstats_xmlrpc() {
  $methods = array();
  $methods['userStats.getStatus'] = 'xmls_tzstats_get_status';
  $methods['userStats.getLogins'] = 'xmls_tzstats_get_logins';
  return $methods;
}

function tzstats_auth_xmlrpc($key, $nonce, $params) {
  // Verify nonce length
  if (strlen($nonce) < 16) {
    return FALSE;
  }

  // Verify that nonce is unique
  $nonce_sha = hash('sha256', $nonce);
  $unique = @db_query("INSERT INTO {tzstats_xmlrpc_nonce} (nonce) VALUES ('%s')", $nonce_sha);
  if (!$unique) {
    // Nonce must be unique
    return FALSE;
  }

  // Verify API key HMAC
  $data = $_SERVER['HTTP_HOST'] . $nonce . implode($params);
  $hmac = hash_hmac('sha256', $data, TIMEZYNK_TZSTATS_API_KEY);
  return $hmac == $key;
}

function xmls_tzstats_get_status($key, $nonce, $timestamp) {
  if (!tzstats_auth_xmlrpc($key, $nonce, array($timestamp))) {
    return xmlrpc_error(401, 'Unauthorized');
  }

  $user_status = array();
  $date = date_make_date($timestamp);
  $date->setTime(0, 0, 0);
  $date->modify('+1 day');
  $now = $date->format('U');

  $result = db_query('SELECT * FROM {users} u INNER JOIN {tzuser} tzu ON tzu.uid = u.uid WHERE u.uid > 1 AND u.status = 1');
  while ($account = db_fetch_object($result)) {
    $status = tzuser_get_user_status($account, $now);
    $user_status[] = array(
      'uid' => intval($account->uid, 10),
      'status' => $status->getStatusCode(),
      'login' => $status->getLastLogin(),
      'due_count' => $status->getNumberOfDueReports(),
      'mobile' => empty($account->mobile) ? '' : $account->mobile,
      'name' => $account->name,
      'fullname' => $account->fullname,
    );
  }

  return $user_status;
}

function xmls_tzstats_get_logins($key, $nonce, $timestamp, $interval) {
  if (!tzstats_auth_xmlrpc($key, $nonce, array($timestamp, $interval))) {
    return xmlrpc_error(401, 'Unauthorized');
  }

  $query = 'SELECT COUNT(DISTINCT(uid)) FROM {tzstats_login} WHERE timestamp > %d AND timestamp < %d';
  $result = db_result(db_query($query, $timestamp - $interval, $timestamp));
  return intval($result);
}
