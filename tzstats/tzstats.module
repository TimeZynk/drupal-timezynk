<?php

function tzstats_menu() {
  $items['admin/reports/invoice'] = array(
    'title' => 'Invoice',
    'title callback' => 't',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tzstats_invoice_form'),
    'file' => 'tzstats.invoice.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_tzsms_send.
 * Logs sms sending to the statistics database
 */
function tzstats_tzsms_send($type, $phonenbr, $length) {
  global $user;
  $record = array(
    'uid' => $user->uid,
    'timestamp' => time(),
    'sms_type' => $type,
    'destination' => $phonenbr,
    'length' => $length,
  );
  drupal_write_record('tzstats_sms', $record);
}

/**
 * Implements hook_tzproto_saved_report
 * Logs the saved report timestamp for billing statistics
 */
function tzstats_tzproto_saved_report($report) {
  $record = array(
    'uid' => $report->assignedto,
    'timestamp' => time(),
    'vid' => $report->vid,
  );
  drupal_write_record('tzstats_report', $record);
}

function tzstats_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'login') {
    $record = array(
      'uid' => $account->uid,
      'timestamp' => time(),
    );
    drupal_write_record('tzstats_login', $record);
  }
}

function tzstats_synchronized_multiple_users($module, $count, $successful, $before, $after) {
  watchdog('tzstats', 'Synchronized !successful/!count users in !seconds seconds using @module',
    array(
      '@module' => $module,
      '!successful' => $successful,
      '!count' => $count,
      '!seconds' => ($after - $before),
    )
  );
  $record = array(
    'module' => $module,
    'count' => $count,
    'successful' => $successful,
    'seconds' => ($after - $before),
    'timestamp' => time(),
  );
  drupal_write_record('tzstats_sync', $record);
}

function tzstats_cron() {
  require_once(dirname(__FILE__) . '/tzstats.user.inc');
  tzstats_record_user_status();
  tzstats_clean_sync_stats();
}

/**
 * Implementation of hook_views_api.
 * The rest of the hooks are in tzstats.views.inc
 */
function tzstats_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'tzstats'),
  );
}

function tzstats_clean_sync_stats() {
  db_query(
      "DELETE sync FROM {tzstats_sync} sync ".
      "LEFT JOIN ( " .
        "SELECT id FROM {tzstats_sync} ORDER BY id DESC LIMIT 1000 " .
      ") latest ON sync.id = latest.id " .
      "WHERE latest.id IS NULL"
  );
  watchdog('tzstats', 'Cleared !count rows from tzsync_stats', array('!count' => db_affected_rows()));
}

/**
 * Implementation of hook_date_api_fields().
 *
 * Registers the timestamp field so the date can be used by
 * the Date API views date argument and date filter.
 */
function tzstats_date_api_fields($field) {
  if($field == 'tzstats_sync.timestamp') {
    return array(
      // The type of date: DATE_UNIX, DATE_ISO, DATE_DATETIME.
      'sql_type' => DATE_UNIX,
      // Timezone handling options: 'none', 'site', 'date', 'utc'.
      'tz_handling' => 'site',
      // Needed only for dates that use 'date' tz_handling.
      'timezone_field' => '',
      // Needed only for dates that use 'date' tz_handling.
      'offset_field' => '',
      // Array of "table.field" values for related fields that should be
      // loaded automatically in the Views SQL.
      'related_fields' => array(),
      // Granularity of this date field's db data.
      'granularity' => array('year', 'month', 'day', 'hour', 'minute', 'second'),
    );
  }
}

/**
 * Record a failed login and the user agent conveying the login.
 * Enter description here ...
 * @param string $username
 * @param string $user_agent
 */
function tzstats_tzproto_login_failed($username, $user_agent) {
  $record = array(
    'name' => $username,
  	'user_agent' => $user_agent,
  	'timestamp' => time(),
  );
  drupal_write_record('tzstats_failed_login', $record);
}